// License Information:
// **********************************************
// 
// src/Scripts/Script/MapScript/CH1_Dungeon_SayonaraTomb.scyndi
// (c) Jeroen Broks, 2023, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 23.12.09
// End License Information
Script

#use "Libs/SCI/Audio"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/InterVar"

#use "Script/Use/Link/Ach"
#use "Script/Use/Link/Map"
#use "Script/Use/Link/Textboxes"

#use "Script/Use/General/Pop"

Global Void ZA_CheckMedal()
	If Ach.MedalRate>=25
		Map.Kill("Barrier_Medal")
	End
End

Global Void ZA_Krandar()
	If !Done.KrandarSpokenSayonara
		Pop.Pop("K","North")
		MapText("Krandar")
		Kthura.WalkTo("Pop_Luna","Front_Sayonara")
		MapText("Krandar2")
		Audio.Load("audio/scenario/sayonara_open.ogg").Play()
		//int y = Kthura.Obj.DoorDownStairs.Y
		For i=1,70
			Cls()
			Kthura.Obj.DoorDownStairs.Y--
			Map.DrawScreen()
			Flip()
		End
		Map.PermaKill("DoorDownStairs")
		MapText("Krandar3")
		Pop.UnPop()
		Awarded.Scen_Krandar = True
		Return
	End
End

Global Void NPC_Krandar()
	MapText("Krandar_Think")
End

Global Void NPC_Gauntlet()
	Pop.Pop("G","North")
	MapText("Gauntlet")
	gbool.Allow_Field_Luna = true
	Awarded.Scen_Gauntlet = True
	Map.PermaKill("NPC_Gauntlet")
	Pop.Unpop()
End


#region "Color Puzzle"
class PCol
	ReadOnly Byte R
	ReadOnly Byte G
	ReadOnly Byte B
	ReadOnly String Name
	Constructor(string _N, Byte _R, Byte _G, Byte _B)
		Name = _N
		R = _R
		G = _G
		B = _B
	End
End

ReadOnly Var ColArray = {}
ReadOnly Var Col = {}
Void RC(string _N, Byte _R, Byte _G, Byte _B)
	Col[_N] = new PCol(_N,_R,_G,_B)
	ColArray[Len(ColArray)] = Col[_N]
End
Init 
	RC("Red",255,0,0)
	RC("Yellow",255,255,0)
	RC("Green",0,255,0)
	RC("Blue",0,0,255)
End

Int Cols = 4
Int MaxDesc = 3
Var Goed
Var Desc
Var Answered

Global Void ZA_StartPuzzle()
	Goed = {}
	Desc = {}
	Answered = {}
	Bool Same	
	Int TimeOut=10000
	Repeat
		Plua SameCheck = {}
		Same = False
		TimeOut--
		Lua.assert(TimeOut>0,"Sayonara puzzle timeout") // Prevent infinite loops
		For i=1,Cols
			Int C; C = math.random(0,Len(ColArray)-1)
			Int D; D = Math.random(1,MaxDesc)
			string S; S = sprintf("%s.%d",ColArray[C].Name,D)
			For CS,_ in pairs(SameCheck); Same = Same || CS==S; End
			Goed[i] = ColArray[C].Name
			Desc[i] = D
		End
	LoopWhile Same
End

Void Plate(String Color,Int I)
	Bool Check = True
	Answered[i]=Color
	Var O;O = Kthura.Obj["NPC_T"..i]
	Var C;C = Col[Color]
	O.R = C.R
	O.G = C.G
	O.B = C.B
	For i=1,Cols
		Check = Check && Answered[i]==Goed[i]
	End
	If Check 
		Map.PermaKill("TBarrier")
	End
End

Global Void ZA_Red1();    Plate("Red",1);    End
Global Void ZA_Red2();    Plate("Red",2);    End
Global Void ZA_Red3();    Plate("Red",3);    End
Global Void ZA_Red4();    Plate("Red",4);    End
Global Void ZA_Yellow1(); Plate("Yellow",1); End
Global Void ZA_Yellow2(); Plate("Yellow",2); End
Global Void ZA_Yellow3(); Plate("Yellow",3); End
Global Void ZA_Yellow4(); Plate("Yellow",4); End
Global Void ZA_Green1();  Plate("Green",1);  End
Global Void ZA_Green2();  Plate("Green",2);  End
Global Void ZA_Green3();  Plate("Green",3);  End
Global Void ZA_Green4();  Plate("Green",4);  End
Global Void ZA_Blue1();   Plate("Blue",1);   End
Global Void ZA_Blue2();   Plate("Blue",2);   End
Global Void ZA_Blue3();   Plate("Blue",3);   End
Global Void ZA_Blue4();   Plate("Blue",4);   End

Global Void NPC_T1(); MapText("CPZ_"..Goed[1].."_"..Desc[1]); End
Global Void NPC_T2(); MapText("CPZ_"..Goed[2].."_"..Desc[2]); End
Global Void NPC_T3(); MapText("CPZ_"..Goed[3].."_"..Desc[3]); End
Global Void NPC_T4(); MapText("CPZ_"..Goed[4].."_"..Desc[4]); End

#endregion