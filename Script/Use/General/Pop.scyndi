// License Information:
// src/Scripts/Script/Use/General/Pop.scyndi
// Version: 24.01.11
// Copyright (C) 2023, 2024 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link/Map"
#use "Script/Use/Link/Party"


// 0 = Not popped
// 1 = Instant pop (so unpop must also be instant
// 2 = Normal pop
Int Popped = 0
Var PopActors



Void Pop(string ExPr,string W="North",MoveNoWalk)
	Lua.assert(Popped==0,"Double pop!")
	Player.Visible=False
	PopActors = {}
	For i=0,Party.FullSize-1
		string ChT = Party.Char(i)
		CSayF("Pop: %s,%s -> %d:%s",ExPr,W,i,ChT)
		Kthura.Spawn("Pop_"..ChT,"Player")
		Var O;O = Kthura.Obj["Pop_"..ChT]
		PopActors[len(PopActors)] = O
		PopActors[Cht] = O
		O.Texture = sprintf("GFX/Player/%s.%s.jpbf",ChT,W)
		If MoveNoWalk
			Kthura.MoveTo("Pop_"..ChT,ExPr.."_"..ChT)
		Else
			Kthura.WalkTo("Pop_"..ChT,ExPr.."_"..ChT)
		End
	End
	Popped = 2
End

Void Tex(String ChT,String W)
	Var O;O = Kthura.Obj["Pop_"..ChT]
	O.Texture = sprintf("GFX/Player/%s.%s.jpbf",ChT,W)
End

Void UnPop(string aspt="")
	If aspt!=""
		Player.X = Kthura.Obj[aspt].X
		Player.Y = Kthura.Obj[aspt].Y
	End
	Switch Popped
		Case 2
			For k,o in Pairs(PopActors)
				//o.WalkTo("Player")
				if Lua.type(k)=="string"; Kthura.WalkTo("Pop_"..k,"Player"); End
			End
			Bool StillMoving
			Int TimeOut = 1000000 
			Repeat
				StillMoving = False // Just to make sure, as it should ALWAYS be False when passing this point
				For k,o in Pairs(PopActors)
					StillMoving = StillMoving || o.Walking
				End
				Cls()
				Map.DrawScreen()
				Flip()
				TimeOut--
				if TimeOut%1000==0 || TimeOut<2500; CSayF("UnPop Time-Out in %d more frames",TimeOut); End
				Lua.assert(TimeOut>0,"Unpop TimeOut")
			LoopWhile StillMoving
			FallThrough 
		Case 1
			For k,_ in Pairs(PopActors)
				If Lua.type(k)=="string"; Map.Kill("Pop_"..k); End
			End
			Player.Visible=true
		Default
			Return
	End
	Popped=0
End