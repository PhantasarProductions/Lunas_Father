// License Information:
// src/Scripts/Script/Use/General/IAA_Hover.scyndi
// Version: 23.11.10
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Graphics"

#use "Script/Use/General/UseIAA"
#use "Script/Use/General/Dice"

readonly var bfnt = ObtainFont("BASE")
readonly var mfnt = ObtainFont("Mini")

class HoverLine
	readonly string Text
	readonly byte R
	readonly byte G
	readonly byte B
		
	Get int W
		Return mfnt.width(Text)
	end
	
	Get int H
		Return mfnt.height(Text)
	End
	
	Constructor(string T, byte _r = 255, byte _g = 255, byte _b = 255)
		Text = T
		R = _r
		G = _g
		B = _b
	End
End

Class HoverIAA
	readonly Var item
	get string Head
		return item.Name
	end
	
	get string Desc
		return Item.Description
	end
	
	readonly var Lines
	
	Readonly int W
	Readonly int H
		
	Constructor(__item)		
		If lua.type(__item)=="string"
			item = IAA[__item]
		Else
			item = __item
		End
		Lines = {}
		W = bfnt.width(Head)
		W = math.max(W,mfnt.width(Desc))
		H = bfnt.height(head) + mfnt.height(Desc)
		
		// Heal
		do
			string ds
			for d in each(Dice.Types)
				int dn; dn = item[sprintf("HealD%d",d)]
				switch dn
					case 0
						// Do nothing
					case 1
						if ds!=""
							ds = sprintf("%s%s",ds, " + ")
						end
						ds = sprintf("%s d%d",ds,d)
					default
						if ds!=""
							ds = sprintf("%s%s",ds, " + ")
						end
						ds = sprintf("%s %dd%d",ds,dn,d)
				end	// switch		
			end // for
			if item.HealPlus>0
				if ds!=""
					ds = sprintf("%s%s",ds, " + ")
				end //if
				ds = sprintf("%s%d",ds,item.HealPlus)
			end // if
			If item.HealUserBonusScript!=""
				if ds != "";ds = ds .. " + "; end
				ds = ds .. "ChrBns"
			End
			ds = Trim(ds)
			if ds!=""
				Lines[len(Lines)] = new HoverLine(sprintf("Heal: %s",ds),180,255,180)
			End // if
				
		end	// do
		
		// Attack
		do
			string ds
			for d in each(Dice.Types)
				int dn; dn = item[sprintf("AtkD%d",d)]
				switch dn
					case 0
						// Do nothing
					case 1
						if ds!=""
							ds = sprintf("%s%s",ds, " + ")
						end
						ds = sprintf("%s d%d",ds,d)
					default
						if ds!=""
							ds = sprintf("%s%s",ds, " + ")
						end
						ds = sprintf("%s %dd%d",ds,dn,d)
				end	// switch		
			end // for
			if item.AtkPlus>0
				if ds!=""
					ds = sprintf("%s%s",ds, " + ")
				end //if
				ds = sprintf("%s%d",ds,item.HealPlus)
			end // if
			If item.AtkUserBonusScript!=""
				if ds != "";ds = ds .. " + "; end
				ds = ds .. "ChrBns"
			End
			if ds!=""
				Lines[len(Lines)] = new HoverLine(sprintf("Attack: %s",ds),255,180,180)
				If Item.StatBase
					Lines[len(Lines)] = new HoverLine(sprintf("%s vs %s",Item.AtkStatAtk,Item.AtkStatDef),255,180,180)
				End
				if Item.AtkElement!="" && Item.AtkElement!="None"
					Lines[len(Lines)] = new HoverLine(sprintf("%s based",Item.AtkStatAtk,Item.AtkElement),255,180,180)
				End
			End // if
		End
		if Item.Accuracy_Check
			Lines[len(lines)] = new HoverLine(sprintf("Aim: %s vs %s",Item.Accuracy_Stat,Item.Evasion_Stat),255,255,180)
		End
		// Calculate sizes
		For l in each(lines)
			w = math.max(w,l.W)
			H = H + l.H
		End
	End
		
	void Show(int _x,_y)
		int c;  c  = W div 2
		int x;  x  = math.max(0,math.min(Graphics.Width-w, _x - c))
		int y;  y  = math.max(0,math.min(Graphics.Height-h, _y))
		int dy; dy = y
		int cx; cx = x + c
		SetColor(0,0,0,127)
		Rect(x,y,w,h)
		SetColor(0,180,255,255)
		BFnt.Text(Head,cx,dy,2,0); dy = dy + BFnt.Height(Head)
		SetColor(255,180,0,255)
		MFnt.Text(Desc,cx,dy,2,0); dy = dy + MFnt.Height(Desc)
		SetColor(255,255,255)
		For l in each(Lines)
			SetColor(l.r,l.g,l.b,255)
			MFnt.Text(l.Text,cx,dy,2); dy = dy + l.h
		End
	End
End