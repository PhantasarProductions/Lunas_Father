// License Information:
// src/Scripts/Script/Use/Link/Map.scyndi
// Version: 23.12.04
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/SString"
#use "Libs/SCI/InterVar"
#use "Libs/SCI/Statistician"

#use "Script/Use/General/Loading"


plua __Niks();end


#region MapScript
// Dirty, but should work
plua mscallfunc


QuickMeta FoundTravelerEmblem
	index
		return gbool[sprintf("TRAVELER_EMBLEM_%s",key)]
	end
	
	newindex
		gbool[sprintf("TRAVELER_EMBLEM_%s",key)] = value!=false
	end
end


	
QuickMeta MapScript
	newindex
		Lua.error(sprintf("ALL members of \"MapScript\" are read-only and yes that includes \"%s\"!",key))
	end
	
	index		
		Lua.assert(Sys.HasState("MAPSCRIPT"),"There is no mapscript loaded, so calls to the MapScript class are pointless!")
		mscallfunc = mscallfunc || {}
		mscallfunc[key] = mscallfunc[key] || Lua.load(sprintf("return function(...) SCI_Call(\"MAPSCRIPT\",\"%s\",...) end",key))()
		return mscallfunc[key]
	end
End

Get Bool AllowEncOff
	Return FoundTravelerEmblem[Map.MapFile]
End

Void ClearMapScript()
	mscallfunc = {}
End
#endregion

Void LoadFlowField()
	Sys.LoadNewFlow("FIELD","Script/Flow/Flow_Field.lbc")
End

Void Load(string MapBundle)	
	Loading.Show()
	LoadFlowField()
	Sys.Call("FLOW_FIELD","ExeLoadMap",MapBundle)
end

void Kill(string Tag,Perma)
	//if (Perma!=false)
		//Perma=1
	//	Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.PermaKill",Tag)
	//else
		//Perma=0
		Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.Kill",Tag)
	//End
	//Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.Kill",Tag,Perma)
End

void PermaKill(string Tag)
	Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.PermaKill",Tag)
end	

void DelayKill(string Tag)
	Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.DelayKill",Tag)
end	

Void ExternalKill(string M,String L, String T)
	Sys.Call("FLOW_FIELD","FlowField.FIELD_KILL.ExternalKill",M,L,T)
End

Get String Layer
	String Ret
	ret = Kthura.CurrentLayer
	Return Ret
end

Set String Layer
	// To do: Kill old player before moving on
	Kthura.CurrentLayer=Upper(Value)
End

Get String MapFile
	Return StripDir(Kthura.LastLoadedMap)
End

Void GoToMap(String MapBundle,String LayerTag,String SpawnSpot="Start")
	Load(MapBundle)	
	Layer=LayerTag
	Kthura.Spawn("Player",SpawnSpot)
End

Void GoToMapXY(String MapBundle,String LayerTag,int X,int y)
	Load(MapBundle)
	Layer=LayerTag
	Kthura.Spawn("Player",X,Y)
End

Void GoToLayer(string LayerTag,String SpawnSpot="Start")
	Kill("Player",false)
	CSayF("Going to Layer %s, spot %s",LayerTag,SpawnSpot)
	Layer=LayerTag	
	Kthura.Spawn("Player",SpawnSpot)
	if (!Kthura.HasObj("Player"))
		CSayF("Spawning player on %s failed",SpawnSpot)
	Else
		CSayF("Player standing on (%d,%d) in layer %s",Kthura.Obj.PLAYER.X,Kthura.Obj.Player.Y,Layer)
	End
	Sys.Call("FLOW_FIELD","AutoPlayer")
	CSay("Moving to layer complete")
End

Get String Leader
	if gString.Leader==""
		plua P
		P = Statistician.Obtain("LUNA_PARTY")
		gString.Leader = P.Party[0]
		CSayF("No leader yet present. Set to first character in the party: %s",P.Party[0])
	End
	// printf("Leader: '%s'\n",gString.Leader)
	return gString.Leader
End

Get String Title
	Return Kthura.MetaData.Title
end

Set String Leader
	gString.Leader = Value
End

void PlayerWalkTo(a,b)
	Kthura.WalkTo("Player",a,b)
end

Get Bool HasPlayer
	Return Kthura.HasObj("PLAYER")
End

Void AddCyclePre(string ms)
	Sys.Call("FLOW_FIELD","AddCyclePre",ms)
End

Void AddCyclePost(string ms)
	Sys.Call("FLOW_FIELD","AddCyclePost",ms)
End

Void Boss(string Tag)
	Sys.Call("FLOW_FIELD","StartBoss",Tag)
End

Void DrawScreen()
	Sys.Call("FLOW_FIELD","XDS")
End


QuickMeta Player
	newindex
		if !HasPlayer
			Sys.TraceBack()
		End
		Kthura.Obj.PLAYER[key]=value
	end
	index
		if !HasPlayer
			Sys.TraceBack()
		End
		switch upper(key)
		case "WALKTO"
			return PlayerWalkTo
		case "WALKING" 
			return Kthura.Walking("Player")
		case "STOPWALKING"
			Kthura.StopWalking("Player")
			return __Niks
		default
			return Kthura.Obj.PLAYER[key]
		end
	end
end