// License Information:
// src/Scripts/Script/Use/Link/Party.scyndi
// Version: 23.11.07
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Sys" 
#use "Libs/SCI/InterVar"
#use "Libs/SCI/Statistician"

plua _Party

const Var BaseStats = NewArray("Strength","Defense","Intelligence","Resistance","Agility","Accuracy","Evasion")


Init
	Sys.LoadStateNew("SUB_PARTY","Script/Subs/SubParty.lbc")
End

Void NewChar(string CH,int lv1,int lv2, int lv3)
	Sys.Call("SUB_PARTY","CreateChar",Ch,lv1,lv2,lv3)
End

Void Boxes(_chr)
	Sys.Call("SUB_PARTY","PartyBoxes",_chr)
End

Void BoxesCombat(_chr)
	Sys.Call("SUB_PARTY","PartyBoxes",_chr,1)
End

Void SkillExpUp(String Ch, int skill, int experience=5)
	//print("Skill: ",Ch,skill,experience)
	Sys.Call("SUB_PARTY","CharSkillExpUp",Ch,skill,experience||5)
End
	


Void StartSet()
	CSay("Setting party!")
	_Party = Statistician.CreateNew("LUNA_PARTY")
	_Party.Party.Size = 6
	_Party.Party[0] = "Myrah"
	_Party.Party[1] = "Francis"
	For i=0,_Party.Party.Size-1
		CSayF("Spot %d => %s",i,_Party.Party[i])
	End
End

String Char(int i,nch)
	_Party = _Party || Statistician.CreateNew("LUNA_PARTY")
	if nch; _Party.Party[i]=nch; end
	Return _Party.Party[i]
End

int GetLevel(string ch)
	_Party = _Party ||  Statistician.CreateNew("LUNA_PARTY")
	return _Party.Char[ch].Stat.Level
end

Get Int FullSize	
	_Party = _Party ||  Statistician.CreateNew("LUNA_PARTY")
	for i=0,5
		if _Party.Party[i]==""
			Return i
		end
	end
	return 6
end

Get Int FrontSize
	return math.min(3,FullSize)
End

Bool InParty(String Ch)
	_Party = _Party || Statistician.CreateNew("LUNA_PARTY")
	for i=0,5
		if _Party.Party[i]==Ch
			Return True
		End
	End
	Return False
End

Int PosInParty(String Ch)
	_Party = _Party || Statistician.CreateNew("LUNA_PARTY")
	for i=0,5
		if _Party.Party[i]==Ch
			Return i
		End
	End
	Return -1
End


Void Recover()
	Sys.Call("SUB_PARTY","Recover")
End


Var SkillExp(string ch,int idx)
	plua _ret
	_Party = Statistician.CreateNew("LUNA_PARTY")
	_ret = _Party.Char[ch].Points[sprintf("SKILL_EXP_%d",idx)]
	if _ret.Maximum==0
		_ret.Maximum=100^gint.skill
	end
	return _ret
end

Int SkillLvl(string ch,int idx)
	plua _ret
	_Party = Statistician.CreateNew("LUNA_PARTY")
	if !_Party.Char[Ch].HaveStat(sprintf("SKILL_LVL_%d",idx))
		Return 1
	End
	_ret = _Party.Char[ch].Stat[sprintf("SKILL_Lvl_%d",idx)]
	return math.max(_ret,1)
end