// License Information:
// src/Scripts/Script/Flow/FlowCombat/Diamonds.scyndi
// Version: 23.10.25
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Sys"
#use "libs/sci/graphics"

#use "Script/Use/General/Dice"

plua Scyndi = Lua.Scyndi
Var Slots
Var Order

Class TDiamond
	Static Var _Images
	Int X = -1000
	Int ToX
	String _Type
	Get String Type
		return _Type
	end
	Set String Type
		_Type=Upper(Value)
	End
	String ImgTag
	
	Get Var Img
		_Images = _Images || {}
		_Images[ImgTag] = _Images[ImgTag] || ObtainImage(ImgTag)
		return _Images[ImgTag]
	End
		
	String FighterTag
	String Action
	Table ActionTargets
	Table ActionParameters
	
End

Get Int MaxNum
	If !Slots
		Return 0
	End
	Int ret = 0
	For i,_ in pairs(Slots)
		ret = math.max(ret,i)
	End
	Return ret
End

Int InitialPos(int pos)
	Int ret 
	If (pos==0)
		Return Graphics.width - 64
	End
	ret = Graphics.Width - (pos*32) - 127
	Return ret
End

Bool Empty(int position)
	If !Slots[position]
		Return true
	End
	Return Slots[position].Type=="BACK"
End

Var NewJoker(int position)
	var Ret;Ret = New TDiamond()
	Ret.ToX = InitialPos(position)
	Ret.Type = "JOKER"
	Ret.ImgTag = "COMBATDIAMOND_JOKER"
	if Slots[position]
		ret.X = Slots[position].X
	End
	Slots[position]=ret
	Return ret
End

Var DeleteDiamond(int position)
	var Ret;Ret = New TDiamond()
	Ret.ToX = InitialPos(position)
	Ret.Type = "BACK"
	Ret.ImgTag = "COMBATDIAMOND_BACK"
	if Slots[position]
		ret.X = Slots[position].X
	End
	Slots[position]=ret
	Return ret
End

bool Forced(string tag1,diamond,force)
	If (!force) || (!diamond) || diamond.Type=="BACK" || diamond.Type=="JOKER"
		Return False
	End
	string tag2;tag2=diamond.FighterTag
	Switch force
		Case True 1 "ALWAYS"
			return True
		Case 2 "ENEMYONLY"
			plua f1;f1 = Scyndi.Class.Fighter.ByTag[tag1]
			plua f2;f2 = Scyndi.Class.Fighter.ByTag[tag2]
			If (!f1) || (!f2)
				Return True
			End
			Return f1.Team!=f2.Team
		Case 0 "NONE"
			Return False
		Default
			Lua.error("Unknown force type for diamond replacement !")
	End
End

Var NewPlayer(int position,string tag,force)
	var Ret;Ret = New TDiamond()
	While (!Empty(position)) && (!Forced(tag,Slots[position],force))
		position++
	End
	Ret.ToX = InitialPos(position)
	Ret.Type = "PLAYER"
	Ret.ImgTag = "COMBATDIAMOND_HERO_"..Upper(Tag)
	Ret.FighterTag=Tag
	if Slots[position]
		ret.X = Slots[position].X
	End
	Slots[position]=ret
	Return ret
End

Var NewFoe(int position,string tag,force)
	var Ret;Ret = New TDiamond()
	While (!Empty(position)) && (!Forced(tag,Slots[position],force))
		position++
	End
	Ret.ToX = InitialPos(position)
	Ret.Type = "FOE"
	Ret.ImgTag = sprintf("COMBATDIAMOND_FOE_%02d",Lua.Scyndi.Class.Fighter.ByTag[Tag].CardAlphaNum)
	Ret.FighterTag=Tag
	if Slots[position]
		ret.X = Slots[position].X
	End
	Slots[position]=ret
	Return ret
End

Var NewAction(position,string Tag,string act,targets,force,parameters)
	var Ret;Ret = New TDiamond()
	While (!Empty(position)) && (!Forced(tag,Slots[position],force))
		position++
	End
	Ret.ToX = InitialPos(position)
	Ret.Type = "FOE"
	Ret.ImgTag = "COMBATDIAMOND_EXTRA"
	Ret.FighterTag=Tag
	Ret.Action=Act
	Ret.ActTargets=targets
	Ret.ActParameters=Parameters
	If Slots[position]
		ret.X = Slots[position].X
	End
	Return ret
End

Void OrderFighterDiamonds()
	plua f; f = Scyndi.Class.Fighter
	plua tmp = {}
	Order = {}
	for k,v in pairs(f.ByTag)
		tmp[sprintf("%05d::%03d::%03d::%03d",99999-v.Stat.Agility,Dice.D100,Dice.D100,Dice.D100)]=v
		// Now only Agility should matter. Those 3d100 rolls are merely for tie breaking.
	end
	for k,v in spairs(tmp)
		plua p=Len(Order)+1
		v.DOrder = p
		Order[Len(Order)] = v
		CSayF("Ordering '%s' => '%s' onto position #%d",k,v.Tag,p)
	end
End

Void InitialDiamonds()
	For i=100,2000,100
		Slots[i] = NewJoker(i)
	End
	For i,ch in ipairs(Order)
		Switch ch.Team
			Case "Hero"
				NewPlayer((i+1)*4,ch.Tag,ch.Force)
			Case "Foe"
				NewFoe((i+1)*4,ch.Tag,ch.Force)
			Default
				Lua.error("InitialDiamonds: Unknown team ("..ch.Team..")")
		End
	End
End

Void DrawDiamonds()

	For i=0,25
		Slots[i] = Slots[i] || DeleteDiamond(i)
		plua CS;CS = Slots[i]
		If (CS.X<CS.ToX)
			CS.X = math.min(CS.ToX,CS.X+math.max(1,math.ceil((CS.ToX-CS.X)/10)))
		End
		SetColor(255,255,255)
		CS.IMG.Draw(CS.X,5)
	End
End