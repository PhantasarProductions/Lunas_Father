// License Information:
// src/Scripts/Script/Flow/FlowCombat/CFoe.scyndi
// Version: 24.07.20
// Copyright (C) 2023, 2024 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "libs/sci/GINIE"
#use "libs/sci/SString"
#use "libs/sci/Graphics"
#use "libs/sci/InterVar"
#use "libs/sci/statistician"

#use "script/use/general/useiaa"
#use "script/use/general/dice"
#use "script/use/general/cash"
#use "script/use/link/mini"
#use "script/use/link/party"

#use "script/flow/flowcombat/status_change_manager"

plua LoadedFoes
plua FParty = Statistician.Obtain("LUNA_PARTY")

plua minifnt = ObtainFont("MINI")

Const Int DrawTypes_Non = 0
Const Int DrawTypes_Neg = 1
Const Int DrawTypes_Flp = 2
Const Int DrawTypes_Ani = 3

plua FoeImageRegister 

plua FoeImage(string pic)
	If Right(Pic,1)=="/"
		Var DPic;DPic = JCR6.Dir(pic)
		if (Len(DPic)==0); Lua.error("Empty foe pic folder: "..pic); end
		Int I;I=math.random(0,len(DPic)-1)
		Pic = DPic[i]
	End
	plua T;T = "COMBAT_FOE::"..Upper(pic)	
	FoeImageRegister = FoeImageRegister || {}
	FoeImageRegister[T] = FoeImageRegister[T] || LoadNewImage(Pic,T)
	FoeImageRegister[T].Hot(FoeImageRegister[T].Width div 2, FoeImageRegister[T].Height)
	Return FoeImageRegister[T]
End
	

Class Foe
	ReadOnly String Tag
	ReadOnly Int IDNum
	ReadOnly Int CardAlphaNum
	ReadOnly Var RawData
	ReadOnly Var Char
	ReadOnly Var Stat	
	ReadOnly String Team = "Foe"
		
	ReadOnly Var _Status 
	ReadOnly Var StatusChanges
	ReadOnly Var Permanenced = {}
		
	// Bunch of callbacks that could be run if a hero attacks a foe.
	// Function should be:   Void StruckFunc(int damage,var attacker, var target) 
	Var Struck = {}
		
	Get String AudName
		plua ret;ret = RawData.Value("MetaData","AudName")
		If ret == ""
			ret = "AnyFoe"
		End
		Return ret
	End
	
		
	Get Int DrawType
		Return RawData.IntValue("MetaData","DrawType")
	End
	
	Get Int Red; Return RawData.IntValue("Color","Red"); end
	Get Int Green; Return RawData.IntValue("Color","Green"); end
	Get Int Blue; Return RawData.IntValue("Color","Blue"); end
	
	Bool Gone = False
	Bool Killed = False 
	Bool Guarding = False
	
	Get Bool IsBoss
		return Upper(RawData.Value("MetaData","Boss"))=="TRUE"
	End
				
	Get Bool TargetablePlayer
		Return HP>0 && (!Gone)
	End
	
	Get Bool TargetableFoe
		Return TargetablePlayer
	End
		
	Get String FoeFile
		return RawData.Value("INGAME","FoeFile")
	End
	
	Get String ImageFile
		Return RawData.Value("MetaData","Image")
	End
	
	Get String Joker
		Return RawData.Value("Joker","Joker")
	End
		
	Get Bool ShowHPBar
		Switch gint.skill
			case 1
				return true
			case 2
				return gint[sprintf("Killed.%s",FoeFile)]>0
			case 3
				return false
			default
				return false
		end
	End
		
	Get Int Force
		// Actual code will come later when skills have been added
		return 0
	End
		
	Int DOrder
		
	Bool AltCoords = False
	int _AltX
	Int _AltY
	int _X
	int _Y
	
	Get Int X
		If AltCoords
			Return _AltX
		End
		return _X
	End
	
	Set Int X
		AltCoords=True
		_AltX=Value
	End
	
	Get Int Y
		If AltCoords
			Return _AltY
		End
		return _Y
	End
	
	Set Int Y
		AltCoords=True
		_AltY=Value
	End
	
		
	Get Int HP
		Return Char.Points.HP.Have
	End
	Set Int HP
		Char.Points.HP.Have = Value
	End
	Get Int MaxHP
		Return Char.Points.HP.Maximum
	End
	
	// Safety precaution.
	Get Int FP; Return 0; End
	Set Int FP; End
	Get Int MaxFP; Return 0; End
	
	Bool Flipped = False
	Int Frame = 0
	Var Images
	
	Int PoseTicker
	Bool DoPose(string pose)
		Switch DrawType
			Case 0
				Return True
			Case 1 2
				 PoseTicker = (PoseTicker + 1) % 12
				 if (PoseTicker%3)==0
				 	 Flipped = !Flipped
				 End
				 If PoseTicker==0
				 	 Flipped = False
				 	 Return True
				 End
				 Return False
			Case 3
				Lua.Error("Animation not yet supported!")
			Default
				Lua.Error(sprintf("Drawtype %d is unknown",DrawType))
		End
		Return True // Safety pre-caution
	End
	
	Bool Fatal(string Element)
		return Upper(RawData.Value("Fatal",Element))=="TRUE"
	End
	
	Int Resistance(string Element)
		return RawData.IntValue("RESIST_ELEMENT",Element)
	End
	
	Number NResistance(string Element)
		number Ret
		Ret = Self.Resistance(Element)
		Ret = Ret / 100
		Return Ret
	End
	
	Int StatusResistance(string Status)
		Return RawData.IntValue("RESIST_STATUS",Status)
	End
	
	Number KillScaleX
	Number KillScaleY
	Readonly int KillSkipReset = 2
	Int KillSkip
	
	Get Bool Drawable
		Return (!Gone) && (KillScaleX>0 || HP>0)
		//Return (!Gone) && (KillScaleX>0)
	End

	
	Void Drop(string itag)
		If iaa[itag].Give()
			Mini.Write(Name,255,0,0)
			Mini.Write(" drops ",255,180,0)
			Mini.WriteLn(iaa[itag].Name,0,180,255)
		End
	End
	
	Get Bool BlockHeal
		Return False
	End
	
	Get Bool Undead
		Return _Status.Ailment_Undead || _Status.Ailment_Zombie  
	End
	
	String Pose = "IDLE"
	
	Void Draw()
		If !Drawable
			Return
		End
		If HP>0
			RawData.NewValue("MetaData","Scale","1000")
			SetScale(RawData.IntValue("MetaData","Scale")/1000)
			KillScaleX = RawData.IntValue("MetaData","Scale")/1000
			KillScaleY = KillScaleX
		Else
			If !Killed
				For i=0,Party.FullSize-1					
					Var h;h = Lua.Scyndi.Class.Fighter.ByTag[Party.Char(i)]
					if i<3; h.irate++; end
					Int e;e = Round(RawData.IntValue("Kill","Experience")*h.rate)
					If h.stat.Level<gint.levelcap
						h.stat.EXP = h.stat.EXP - e
						If (i<3)
							Lua.Scyndi.Class.CharMsg.Put(h.Tag,sprintf("Gains %d experience",e),255,180,0)
						End
					End
				End
				gint[sprintf("Killed.%s",FoeFile)]++
				gint.Kills++
				KillScaleX = RawData.IntValue("XIMG","Scale")/1000
				KillScaleY = KillScaleX
				Killed = True
				//For i=0,party.FullSize-1
				//	CSay("Experience system not yet operational! So no points yet for "..Party.Char(i))
				//End				
				If Dice.D100<RawData.IntValue("DROP1","RATE") 
					Self.Drop(RawData.value("DROP1","ITEM"))
				ElseIf Dice.D100<RawData.IntValue("DROP2","RATE")
					Self.Drop(RawData.value("DROP2","ITEM"))
				Elseif RawData.IntValue("KILL","CASH")>0
					plua getcash;getcash=RawData.IntValue("KILL","CASH")
					Mini.Write(Name,255,0,0)
					Mini.Write(" drops ",255,180,0)
					Mini.Write(Lua.tostring(getcash),0,180,255)
					if (getcash==1)
						Mini.WriteLn(" Shilder",255,180,0)
					Else
						Mini.WriteLn(" Shilders",255,180,0)
					End
					Cash.Have = Cash.Have + GetCash
				End
			End
			//KillSkip = (KillSkip+1)%KillSkipReset
			//If KillSkip==0
				KillScaleX = KillScaleX - 0.006 
				KillScaleY = KillScaleY + 0.011
				//print(KillScaleX,KillScaleY)
			//End
			SetScale(KillScaleX,KilLScaleY)						
		End

		SetColor(Red,Green,Blue)
		Switch DrawType
			Case 0
				//Images = Images || {}
				//Images[false] = Images[false] || FoeImage(ImageFile)
				Images = Images || FoeImage(ImageFile)
				Images.Draw(X,Y)
			Case 1
				Images = Images || {}
				Images[true] = Images[true] || FoeImage(StripExt(ImageFile)..".Negative.png")
				Images[false] = Images[false] || FoeImage(ImageFile)
				Images[Flipped].Draw(X,Y)
			Case 2
				Images = Images || {}
				Images[true] = Images[true] || FoeImage(StripExt(ImageFile)..".Flipped.png")
				Images[false] = Images[false] || FoeImage(ImageFile)
				Images[Flipped].Draw(X,Y)
			case 3
				Images[false] = Images[false] || FoeImage(ImageFile)
				Lua.error("Fully animated not yet supported")
			default
				Lua.error(sprintf("DrawType #4 not (yet?) known",DrawType))
		End
		SetScale(1)
	End
	
	Get Number Scale
		return RawData.IntValue("MetaData","Scale")/1000
	End
	
	Get Int W
		Switch DrawType
		case 0
			Images = Images || FoeImage(ImageFile)
			return math.floor(Images.Width * Scale)
		Default
			Images[false] = Images[false] || FoeImage(ImageFile)
			return math.floor(Images[false].Width * Scale)
		End
	End
	
	Get Int H
		Switch DrawType
		case 0
			Images = Images || FoeImage(ImageFile)
			return math.floor(Images.Height * Scale)
		Default
			Images[false] = Images[false] || FoeImage(ImageFile)
			return math.floor(Images[false].Height * Scale)
		End
	End
	
	Get Int TarX
		return X - (W div 2)
	End
	
	Get Int TarY
		return Y - H
	End
	
	Get Int AtkX 
		Return X+W
	End


	Get String Name
		Return RawData.Value("MetaData","Name")
	End
	
	
	Void Icon(int _ix, int _iy)
		SetColor(255,0,0)
		minifnt.Text(Chr(64+CardAlphaNum),_ix,_iy)
	End
	
	Get Bool Defeated
		Return HP<=0 || Gone
	End
		
	
	ReadOnly Table Actions

	Get Bool UnableToMove
		If HP<=0; Return True; End
		For _,s in pairs(_Status)
			if s.SkipTurn; Return True; End
		End
		Return False
	End

	
	Constructor(int _IDNum,_RawData)
		IDNum = _IDNum
		CardAlphaNum = (_IDNum % 26) + 1
		Tag = sprintf("FOE_%03d",_IDNum); CSayF("Created Foe record '%s' at %d",Tag,IDNum)
		RawData = _RawData
		FParty.NewChar(Tag,RawData.Value("METADATA","NAME"))
		Char = FParty.Char[Tag]
		plua StatTag=sprintf("STAT%d",gint.Skill)
		For st in Each(Party.BaseStats)
			Char.Stat[st] = RawData.IntValue(StatTag,st)
		End
		Char.Stat.HP = RawData.IntValue(StatTag,"HP")
		Stat = Char.Stat
		Char.Points.HP.MaxCopy = "HP"
		Char.Points.HP.Have = Char.Points.HP.Maximum
		Actions = {}
		For i in Each(_RawData.List("IAA","HaveIAA") )
			plua mItem; mItem = { ["Action"] = i, ["Target"] = RawData.Value("ACTION::"..i,"TRGT_SKILL"..gint.skill) }
			For j = 1,_RawData.IntValue("ACTION::"..i,"RATE_SKILL"..gint.skill)
				Actions[Len(Actions)] = mItem
			End
		End
		_Status = {}
		StatusChanges = StatusChangeManager(Tag,Self,_Status) 
		For _Ail In Each(Ailments)
			plua Ail;Ail = _Ail; if Ail=="Zombie"; Ail="Undead"; End
			If Upper(RawData.Value("Start_Status",Ail))=="TRUE"
				CSayF("Foe %s starts the battle with ailment: %s",Tag,Ail)
				_Status["Ailment_"..Ail] = Lua.Scyndi.Class.Status_Change_Manager.SetStatusChange(Tag,"Ailment_"..Ail)
			End
		End
	End
	
	Destructor		
		CSayF("Cleaning old unlinked instance data for: %s",Tag)
	End
End


Void CompileFoe(int FID,FoeData)
	CSayF("Compiling Foe #%d",FID)
	string FoeFile; FoeFile=FoeData.Foe
	string UFoeFile; UFoeFile=Upper(FoeFile)
	string EntryFile; EntryFile = sprintf("Data/Combat/Foes/%s.ini",FoeFile)
	LoadedFoes = LoadedFoes || {}
	LoadedFoes[UFoeFile] = LoadedFoes[UFoeFile] || GINIE.Load(EntryFile,"FOE_"..UFoeFile)
	PLUA Raw;Raw = LoadedFoes[UFoeFile]
	Raw.Value("INGAME","FoeFile",FoeFile)
	PLUA NF; NF = new Foe(FID,Raw)
	NF._X = FoeData.X
	NF._Y = FoeData.Y
	Lua.Scyndi.Class.Fighter.ByTag[NF.Tag] = NF
	plua Alt
	Alt = Raw.IntValue("AltCoords","X"); If Alt<0; NF._X=Graphics.Width  - Alt; ElIf Alt>0; NF._X=Alt; End
	Alt = Raw.IntValue("AltCoords","Y"); If Alt<0; NF._Y=Graphics.Height - Alt; ElIf Alt>0; NF._Y=Alt; End
End