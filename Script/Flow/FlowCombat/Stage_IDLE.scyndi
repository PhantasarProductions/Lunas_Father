// License:
// 	  src/Scripts/Script/Flow/FlowCombat/Stage_IDLE.scyndi
// 
// 	  Version: 25.09.24
// 	
// 	  Copyright (C) 2023, 2024, 2025 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License

Module

#use "Libs/SCI/Sys"

#use "Script/Use/General/UseIAA"

#use "Script/Flow/FlowCombat/Action_Class"
#use "Script/Flow/FlowCombat/Stage"
#use "Script/Flow/FlowCombat/Fighter"
#use "Script/Flow/FlowCombat/Diamonds"

plua Scyndi = Lua.Scyndi

Void Arrive()
End

Void SkipTurn()
	plua a = new Action(Diamonds.Slots[0].FighterTag,"ACT_SKIP")
	a.Targets={Diamonds.Slots[0].FighterTag}
	Scyndi.Globals.Execute(Diamonds.Slots[0].FighterTag,a)
End

Void Cycle()
	If Defeated.Hero
		Stage.CurrentTag="WIPED"
		Return
	ElseIf Defeated.Foe
		Stage.CurrentTag="VICTORY"
		//Lua.Scyndi.Class.STAGE_VICTORY.Victory()
		Return
	End
	If !Diamonds.Slots[0]
		Diamonds.RemoveFirst()
		Return
	End
	Switch Diamonds.Slots[0].Type
		case "BACK" "EMPTY"
			Diamonds.RemoveFirst()
		case "PLAYER" "HERO"
			If Fighter.ByTag[Diamonds.Slots[0].FighterTag].UnableToMove
				SkipTurn()
			ElseIf Fighter.ByTag[Diamonds.Slots[0].FighterTag].PartyPos>=3
				CSayF("%s is not on the front row (%d), so ignore",Diamonds.Slots[0].FighterTag,Fighter.ByTag[Diamonds.Slots[0].FighterTag].PartyPos)
				Diamonds.RemoveFirst()
			Else				
				Stage.CurrentTag = "PMM"
			End
		Case "FOE" "ENEMY"
			//print("\x1b[31mENEMY TURN, BUT THIS HAS NOT YET BEEN SCRIPTED!\x1b[0m"); Diamonds.RemoveFirst()
			plua __foe;__foe=Fighter.ByTag[Diamonds.Slots[0].FighterTag]
			If __foe.HP==0
				Diamonds.RemoveFirst()
			ElIf __foe.Gone
				CSayF("Foe %s gone! Remove diamond!",Diamonds.Slots[0].FighterTag)				
				Diamonds.RemoveFirst()
			ElIf Fighter.ByTag[Diamonds.Slots[0].FighterTag].UnableToMove
				SkipTurn()
			Else
				Scyndi.Class.AI.DoAI(__foe)
			End
		Case "JOKER"
			For Tag,FData in pairs(Fighter.ByTag)
				Switch FData.Team
					Case "Foe"
						If FData.Joker!="" 
							Scyndi.Use(sprintf("Script/Use/Combat/Joker/JOKER_%s",FData.Joker))
							Scyndi.Class["JOKER_"..fData.Joker].JAct(FData)
						End
					Case "Hero"
						For i=0,FData.Char.ListSize("Skills")-1
							plua Skill_Tag;Skill_Tag = FData.Char.List.Skills[i]
							plua Skill; Skill = IAA[Skill_Tag]
							If Skill.Skill_Joker_Script!=""
								Scyndi.Use(sprintf("Script/Use/Combat/Skill/JOKER_%s",Skill.Skill_Joker_Script))
								Scyndi.Class["JOKER_"..Skill.Skill_Joker_Script].Joker(FData,Skill.Skill_Joker_Param)
							End
						End
					Default
						Lua.error("Unknown team for joker: "..FData.Team)
				End
				// Status change checks
				For _sttag,_stdat in pairs(FData._Status)
					If _stdat.Joker_Script!=""
						Scyndi.Use(sprintf("Script/Use/Combat/StatusChanges/JOKER_%s",_stdat.Joker_Script))
						Scyndi.Class["JOKER_".._stdat.Joker_Script].Joker(FData,_stdat.Joker_Param)
					End
				End
			End
			//print("\x1b[31mJOKER, BUT THIS HAS NOT YET BEEN SCRIPTED!\x1b[0m"); 
			Diamonds.RemoveFirst()			
	End
	Diamonds.Check()
End


Init
	Stage.Register("IDLE",Stage_IDLE)
End
