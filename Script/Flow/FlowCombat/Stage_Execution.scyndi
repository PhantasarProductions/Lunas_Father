// License:
// 	  src/Scripts/Script/Flow/FlowCombat/Stage_Execution.scyndi
// 
// 	  Version: 24.11.14
// 	
// 	  Copyright (C) 2023, 2024 Jeroen Petrus Broks
// 	
// 	  ===========================
// 	  This file is part of a project related to the Phantasar Chronicles or another
// 	  series or saga which is property of Jeroen P. Broks.
// 	  This means that it may contain references to a story-line plus characters
// 	  which are property of Jeroen Broks. These references may only be distributed
// 	  along with an unmodified version of the game.
// 
// 	  As soon as you remove or replace ALL references to the storyline or character
// 	  references, or any termology specifically set up for the Phantasar universe,
// 	  or any other univers a story of Jeroen P. Broks is set up for,
// 	  the restrictions of this file are removed and will automatically become
// 	  zLib licensed (see below).
// 
// 	  Please note that doing so counts as a modification and must be marked as such
// 	  in accordance to the zLib license.
// 	  ===========================
// 
// 
// 	  zLib license terms:
// 	
// 	  This software is provided 'as-is', without any express or implied
// 	  warranty.  In no event will the authors be held liable for any damages
// 	  arising from the use of this software.
// 
// 	  Permission is granted to anyone to use this software for any purpose,
// 	  including commercial applications, and to alter it and redistribute it
// 	  freely, subject to the following restrictions:
// 	
// 	  1. The origin of this software must not be misrepresented; you must not
// 	     claim that you wrote the original software. If you use this software
// 	     in a product, an acknowledgment in the product documentation would be
// 	     appreciated but is not required.
// 	  2. Altered source versions must be plainly marked as such, and must not be
// 	     misrepresented as being the original software.
// 	  3. This notice may not be removed or altered from any source distribution.
// End License


Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Audio"
#use "Libs/SCI/SString"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link/Alchemy"

#use "Script/Flow/FlowCombat/Stage"
#use "Script/Flow/FlowCombat/Diamonds"

Plua Scyndi = Lua.Scyndi

Const Var Fnt = ObtainFont("BASE")

Const Int YMsgBar = 70
Const Int HMsgBar = 40
Get Int MYMsgBar; Return HMsgBar Div 2; End

Const Var HeadBack = ObtainImage("BOX_BACK")
Const Int HeadCDReset = 250
String HeadName
Int HeadCD
Int ShortWaitReset = 5
Int ShortWait 

String ChrTag
Var Char
Var Act

Get Var Executor
	Return Char
End



#region "Execution Stages"
Delegate _CES // Current Execution Stage
Table _CESTABLE = {}
Get Var CES
	Return _CES
End
Set Var CES
	switch Lua.type(Value)
		case "string"
			Value=upper(Value)
			Lua.assert(_CESTABLE[Value],"No Execution Stage Registered as: "..Value)
			_CES=_CESTable[Value]
		case "function"
			_CES=Value
		default
			Lua.error("CES may not be of type "..Lua.type(Value).." ("..Lua.tostring(Value)..")")
	End
End
Void EsReg(string K,func)
	_CESTABLE[upper(k)]=func
End
	
Void ES_ShortWait()
	ShortWait--
	If ShortWait<=0
		CES="JumpToTarget"
		If Act.ConsumeItem
			Act.Act.Num--
		End
		if Act.ConsumeManaments
			For M,N in pairs(Act.ConsumeManaments)
				Mana[M] = Mana[M] - N
			End
		End
	End
End

Table ToTarget = nil
Int ToTargetFrame
Const Int ToTargetMaxFrames = 25
Void ES_JumpToTarget()
	// print("Jump to enemy = ",Act.Act.JumpToEnemy," num of targets = ",Len(Act.Targets))
	If (!Act.Act.JumpToEnemy) || Len(Act.Targets)!=1 || (Executor.Team=="Foe" && Executor.Firm)
		CES="Pose"
		Return
	End
	if (!ToTarget)
		// Bresenham be damned!
		Var Tar;Tar=Act.Targets[0]
		Int DisX; DisX = Tar.AtkX-Executor.X
		Int DisY; DisY = Tar.Y-Executor.Y
		Number IncX;IncX = DisX / ToTargetMaxFrames
		Number IncY;IncY = DisY / ToTargetMaxFrames
		ToTarget = {}
		For i=0,ToTargetMaxFrames-1
			ToTarget[i]={}
			ToTarget[i].X = Executor.X+(Math.floor(IncX*i))
			ToTarget[i].Y = Executor.Y+(Math.floor(IncY*i))
		End
		ToTarget[ToTargetmaxFrames] = Tar.AtkX
		ToTarget[ToTargetmaxFrames] = Tar.Y
		ToTargetFrame = -1
		Return
	End
	ToTargetFrame++
	If (ToTargetFrame>=ToTargetMaxFrames)
		CES="Pose"
		Return
	End
	Executor.X = ToTarget[ToTargetFrame].X
	Executor.Y = ToTarget[ToTargetFrame].Y
End

Void ES_Pose()
	If Executor.DoPose(Act.Act.Pose)
		String S = sprintf("AUDIO/COMBAT/HEROPOSE/%s.%s.END.MP3",Executor.AudName,Act.Act.Pose)
		//print(s,"Exist: ",JCR6.EntryExists(S))
		If JCR6.EntryExists(S)
			//print("Play: ",S)
			plua au;au = Audio.LoadNew(s,sprintf("POSE_END_%s_%s",Executor.AudName,Act.Act.Pose))
			au.Play()
		End
		CES="SpellAni"
		If Act.Act.SpellAni_Script!=""
			Scyndi.Use("Script/Use/Combat/SpellAni/SPELLANI_"..Act.Act.SpellAni_Script)
			Scyndi.Class["SPELLANI_"..Act.Act.SpellAni_Script].Start(Executor,Act.Targets,Act.Act.SpellAni_Param)
		End
	End
End


int OTSPA = 0 // Old Time SpellAni
Void ES_SpellAni()
	Bool GoOn=True
	If OTSPA==0
		OTSPA=os.time()
	End
	If Act.Act.SpellAni_Script!=""
		GoOn = !Scyndi.Class["SPELLANI_"..Act.Act.SpellAni_Script].Cycle(Executor,Act.Targets,Act.Act.SpellAni_Param)
	End
	If GoOn && OTSPA!=os.time()
		OTSPA=0
		CES="Effect"
	End
End

Plua WES
void ES_Effect()
	// TODO: Wide effect script! (Needed for Rachel's Blunderbus)
	For Target in Each(Act.Targets) 
		Lua.Scyndi.Class.Effect.Go(Executor,target,act)
	End
	If Act.Act.WideEffect_Script!=""
		WES = WES || {}
		If !WES[Act.Act.WideEffect_Script]
			Lua.Scyndi.Use("Script/Use/Combat/Wide/WIDE_"..Act.Act.WideEffect_Script)
			WES[Act.Act.WideEffect_Script] = Lua.Scyndi.Class["WIDE_"..Act.Act.WideEffect_Script]
		End
		WES[Act.Act.WideEffect_Script].Go(Executor,Act,Act.Act.WideEffect_Param)
	End
	Executor.AltCoords = False
	Executor.Pose = "IDLE"
	Diamonds.RemoveFirst()
	Stage.CurrentTag = "IDLE"
End
	
#endregion

#region "Execution Manager"
Void ExeHead()
	If HeadCD>0
		SetColor(255,255,255)
		HeadCD--
		HeadBack.Tile(0,YMsgBar,Graphics.Width,HMsgBar)
		Diamonds.Slots[0].Img.Draw(5,YMsgBar+MYMsgBar-(Diamonds.Slots[0].Img.Height div 2))
		SetColor(255,180,0)
		Fnt.Text(Replace(Act.Act.Name,"$NAME$",HeadName), Graphics.Width div 2, YMsgBar+MYMsgBar, 2, 2)
		SetColor(255,255,255)
	End
End

Void Arrive()
	HeadCD = HeadCDReset
End

Void Cycle()
	ExeHead()
	CES()
End
#endregion

#region "Execution init"
Global Void Execute(string _Chr,_Act)
	Chrtag = _Chr
	Char = Lua.Scyndi.Class.Fighter.ByTag[_Chr]
	Act = _Act
	Stage.CurrentTag = "Execution"
	ShortWait = ShortWaitReset
	CES=ES_ShortWait
	ToTarget = nil
	PLUA KILL={}
	Switch Char.Team
		Case "Foe"
			HeadName = sprintf("(%s) %s",Chr(64+Char.CardAlphaNum),Char.Name)
		Case "Hero"
			HeadName = Char.Name
		Default
			HeadName = "???"
	End
	For s,sd in pairs(Char._Status)
		sd.Duration--
		CSayF("Status %s on character %s now has a duration of %d actions",s,_Chr,sd.Duration)
		if (sd.Duration<=0); Kill[len(Kill)]=s; End
	End
	For Victim in Each(Kill)
		Char.StatusChanges[Victim] = False
	End
	If Act.RemoveFP
		Char.FP = Char.FP - Act.RemoveFP
	End
End

Init 
	Stage.Register("Execution",Stage_Execution)
	EsReg("JumpToTarget",ES_JumpToTarget)
	EsReg("Pose",ES_Pose)
	EsReg("SpellAni",ES_SpellAni)
	EsReg("Effect",ES_Effect)
End
#endregion
