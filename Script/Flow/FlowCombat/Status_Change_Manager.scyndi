// License Information:
// src/Scripts/Script/Flow/FlowCombat/Status_Change_Manager.scyndi
// Version: 23.12.13
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/GINIE"
#use "Libs/SCI/Graphics"

#use "Script/Use/Link/Mini"

#use "Script/Use/General/Dice"

ReadOnly Var __GLB     = Lua.Scyndi.Globals
ReadOnly Var __CLS     = Lua.Scyndi.Class
ReadOnly Var __SC_Data = GINIE.Load("Data/General/StatusChanges.ini","DATABASE_STATUS_CHANGES")
ReadOnly Var __Icons   = {}
	
Global ReadOnly Table Ailments = NewArray("Poison","Disease","Zombie","Paralysis","Sleep","Curse","Death")
	
Var __SC_Index(s,String Key)
	Key = Upper(Key)
	Switch Key
		Case "TAG" "STATUSTAG"
			return s.___tag
		Case "FIGHTERTAG"
			return s.___fightertag
		Case "FIGHTER"
			return __CLS.Fighter.ByTag[s.___fightertag]
		Case "HAS"
			return s.Fighther.HasStatus[s.___tag] //&& (s.Fighther.HasStatus[___tag]==true || s.Fighther.HasStatus[___tag]>0)
		Case "PERMANENCED"
			return s.Fighter.Permanenced[s.___tag]
		Case "DURATION"
			if s.Fighter.Permanenced[s.___tag] || s.Duration_Infinite
				Return 100000
			End
			return s.___duration
		case "ICON" "IMAGE"
			__Icons[s.___tag] = __Icons[s.___tag] || LoadNewImage(sprintf("GFX/Combat/Status/%s.png",s.___tag),"COMBAT_STATUS_"..s.___tag)
			return __Icons[s.___tag]
		Default
			Switch __SC_Data.Value("Class",Key)
				case "String"
					Return __SC_Data.Value("Rec:"..s.___status,Key)
				case "Int"
					Return __SC_Data.IntValue("Rec:"..s.___status,Key)
				case "Boolean" "Bool"
					Return __SC_Data.IntValue("Rec:"..s.___status,Key)=="True"
				default
					Lua.error("Unknown Status Change Index: "..key)
			End
	End
End

Void __SC_NewIndex(s,String Key,Value)
	Switch Upper(Key)
		//Case "HAS"
		//	if Value
		//		s.Fighther.HasStatus[s.___tag] = s
		//	else
		//		s.Fighther.HasStatus[s.___tag] = nil
		//	End
		Case "PERMANENCED"
			s.Fighter.Permanenced[s.___tag] = Value
		Case "DURATION"
			if s.Fighter.Permanenced[s.___tag] || s.Duration_Infinite
				Return
			End
			s.___duration = Value
		Default
			if __SC_Data.Value("Class",Key)!=""
				Lua.error("Field '"..key.."' is an internal status change field and therefore read-only!")
				Return
			End
			Lua.error("Field '"..key.."' is non-existent in the status change class!")
	End
end

plua __SC_Meta
Init
	__SC_Meta = {}
	__SC_Meta.__index = __SC_Index
	__SC_Meta.__newindex = __SC_NewIndex
End

Var SetStatusChange(String FTag,String STag)
	plua ret = {}
	ret.___tag = STag
	ret.___fightertag = FTag
	ret.___status = STag
	ret.___duration = __SC_Data.Intvalue("Rec:"..STag,"Duration_Plus")
	For d in Each(Dice.Types)
		For r = 1, __SC_Data.Intvalue("Rec:"..STag,"Duration_D"..d)
			ret.___duration = ret.___duration + Dice["d"..d]
		End
	End	
	ret = SetMetaTable(ret,__SC_Meta)
	Return ret
End


Var SCM_Index(s,string k)
	k = Upper(k)
	if (!s.___statuses[k])
		Return False
	End
	Return s.___statuses[k]
End

Void SCM_NewIndex(s,string k,value)
	k = Upper(k)
	If Value
		plua ssc; ssc=SetStatusChange(s.___fightertag,k)
		if !s.___statuses[k]
			Mini.Write(s.___fighter.Name.." ",255,180,0)
			Mini.WriteLn(ssc.CauseMsg,180,0,255)
			if s.Cause_Script!=""
				Lua.Scyndi.Use("Script/Use/Combat/StatusChanges/CAUSE_"..s.Cause_Script)
				Lua.Scyndi.Class["CAUSE_"..s.Cause_Script].Cause(s.___fighter,s.Cause_Param)
			End

		end
		s.___statuses[k] = ssc
	Else
		if s.___statuses[k]
			Mini.Write(s.___fighter.Name.." ",255,180,0)
			Mini.WriteLn(s.___statuses[k].CureMsg,180,255,0)
		end
		s.___statuses[k] = nil
	End
End

Global Var StatusChangeManager(String FTag,Me,SC)
	plua ret = {}
	ret.___fighter    = Me
	ret.___fightertag = FTag
	ret.___statuses   = SC
	Return SetMetaTable(ret,{ ["__index"] = SCM_Index,["__newindex"]=SCM_NewIndex })
End