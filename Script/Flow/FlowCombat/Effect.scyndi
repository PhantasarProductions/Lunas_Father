// License Information:
// src/Scripts/Script/Flow/FlowCombat/Effect.scyndi
// Version: 23.11.14
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/InterVar"

#use "Script/Use/General/Dice"

#use "Script/Flow/FlowCombat/CharMsg"

Bool Effect_Hit(executor,target,act)
	If !Act.Act.Accuracy_Check; return true; End
	Int Accuracy = Dice.D20
	Int Evasion = Dice.D20
	if Accuracy==20
		Return True
	End
	if Evasion==20
		Return False
	End
	Int Acc; Acc = Executor.Char.Stat[Act.Act.Accuracy_Stat]
	Int Eva; Eva = Target.Char.Stat[Act.Act.Evasion_Stat ]
	Return Acc+Accuracy>=Eva+Evasion	
End

Bool Effect_Attack(executor,target,act)
	// Start with 0
	Int Atk = 0
	
	// Base cacluation
	If Act.Act.StatBase!=""
		Atk = math.max(1,Executor.Char.Stat[Act.Act.AtkStatAtk]-Target.Char.Stat[Act.Act.AtkStatDef])
		CSayF("Attack:  %9s = %3d",Act.Act.AtkStatAtk,Executor.Char.Stat[Act.Act.AtkStatAtk])
		CSayF("Defense: %9s = %3d",Act.Act.AtkStatDef,Target.Char.Stat[Act.Act.AtkStatDef])
		CSayF("%d - %d = %d (never lower than 1)",Executor.Char.Stat[Act.Act.AtkStatAtk],Target.Char.Stat[Act.Act.AtkStatDef],math.max(1,Executor.Char.Stat[Act.Act.AtkStatAtk]-Target.Char.Stat[Act.Act.AtkStatDef]))
	End
	
	// Plus
	Atk = Atk + Act.Act.ATKPlus
	
	// Dice
	For Die in Each(Dice.Types)
		For i=1,Act.Act[sprintf("AtkD%d",Die)]
			Atk = Atk + Dice[sprintf("d%d",die)]
			// A normal multiplication count won't do. Then it will only roll one die an multiply its result and that is NOT what we want!
		End
	End
	
	// Any Additional Scripts
	If Act.Act.AtkUserBonusScript!=""
		Lua.Scyndi.Use(sprintf("Script/Use/Combat/AttackBonus/ATKBONUS_%s",Act.Act.AtkUserBonusScript))
		plua atks;atks = Lua.Scyndi.Class["ATKBONUS_"..Act.Act.AtkUserBonusScript]
		plua atkf;atkf = Act.Act.AtkUserBonusFunc 
		If atkf==""; atkf="AtkBonus"; end
		atk = atk + atks[atkf](executor,target,act)
	End
	
	// Elemental Resistances and showing damage
	if Target.Team=="Foe" && Target.Fatal(Act.Act.AtkElement)
		Atk = Target.MaxHP
		CharMsg.Put(Target,"Death",255,0,0)
	Else
		int modifier; modifier = math.floor(Atk*Target.NResistance(Act.Act.AtkElement))
		Atk = Atk - Modifier
		if Target.Resistance(Act.Act.AtkElement)==100
			CharMsg.Put(Target,"Immune",255,180,0)
		elseif Target.Resistance(Act.Act.AtkElement)>0
			CharMsg.Put(Target,Atk,255,180,0)
		elseif Target.Resistance(Act.Act.AtkElement)==0
			CharMsg.Put(Target,Atk,255,255,255)
		else
			CharMsg.Put(Target,Atk,255,0,0)
		End
		If Target.Guarding && Atk>0
			Atk = math.max(1, Atk div 2)
		End
	End
	
	// FP+
	if Target.Team=="Hero"
		Number Rate; Rate = Atk / Target.MaxHP
		Switch gint.skill
			case 1
				Target.Char.Points.FP.Have = Target.Char.Points.FP.Have + math.ceil(50*Rate)
			case 2
				Target.Char.Points.FP.Have = Target.Char.Points.FP.Have + math.ceil(25*Rate)
			case 3
				Target.Char.Points.FP.Have = Target.Char.Points.FP.Have + math.ceil(12*Rate)
			Default
				Target.Char.Points.FP.Have = 0
				// PUNISHMENT FOR CHEATING THE SYSTEM!
		End
	End
	
	// Substract Damage From Target's HP
	Target.HP = Target.HP - Atk
	
	// If this is a killer blow, are there any kill scripts?
	If Target.HP<=0
		if Act.Act.Kill_Script!=""
			Lua.Scyndi.Use("Script/Use/Combat/Kill/KILL_"..Act.Act.Kill_Script)
			Lua.Scyndi.Class["KILL_"..Act.Act.Kill_Script].KillEffect(Executor,Target,Act.Act.Kill_Param)
		End
	End
	
	// If any damage was done, return True
	Return Atk>0
End

Bool Effect_Healing(executor,target,act)

End


Void Go(executor,target,act)
	Bool Hit = False
	
	if Effect_Hit(executor,target,act)
		// Cure status if applicable (must be first)
	
		// Handle attacks
		Hit = Effect_Attack(executor,target,act) || Hit
		
		// Handle Healing
		Hit = Effect_Healing(executor,target,act) || Hit
		
		// Scripts
	
		// Cause status if applicable (must be last)
	End
	
	// When it's all done, but no effects took place show "miss"
	If !Hit
		CharMsg.Put(target,"Miss",127,127,127)
	End
	
	// All done!
End