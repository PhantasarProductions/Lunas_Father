// License Information:
// src/Scripts/Script/Flow/FlowField/Field_Renc.scyndi
// Version: 23.10.21
// Copyright (C) 2021, 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


// Important note!
// I merely copied the script from The Fairy Tale REVAMPED, this because I 
// wanted some effects to be the same enough to make the game recognizable as
// part of the same series. Of course, Scyndi and Neil are very similar in 
// syntax, but by far NOT the same, so adaptions are needed. The first line
// already was a macro. Something Scyndi no longer supports. XD


#use "libs/sci/sys"
#use "libs/sci/jcr6"
#use "libs/sci/ginie"
#use "libs/sci/kthura"
#use "libs/sci/graphics"
#use "libs/sci/intervar"

#use "libs/xmath"
#use "libs/Multipointer"

#use "script/use/link/map"
#use "script/use/link/party"
#use "script/use/link/combat"


module

	plua __RencGINIE
	plua __LayData
	plua FField
	
	QuickMeta RencData
		index
			key = upper(key)
			switch key
				case "ARENA" "MUSIC"
					return __RencGINIE.Value("GENERAL",Key)
				case "FOES"
					return __RencGINIE.List("GENERAL","HAVEFOES")
				case "HAVEENCOUNTERS"
					return len(__RencGINIE.List("GENERAL","HAVEFOES"))>0
				default
					return __RencGINIE.IntValue(Key,sprintf("RATE%d",gint.Skill))
			end
		end
	end
	
	Get String LayerTitle
		Return __LayData.Value(Kthura.CurrentLayer,"Title")
	End

	get int __Skill
		return gint.Skill
	end

	const int __bmr = 17


	ReadOnly Var Gauge = ObtainImage("RENCGAUGE")
	ReadOnly Table RRate = {}
	ReadOnly Table Colors = {}
	Bool RencOn=True
	Table NEnc = {}	
	Table Enemies = {}
	Bool MapHasEnc
	//Int MaxEnc
	Int RateLevel = 1
	
	Get Int MaxEnc
		return __LayData.IntValue(Kthura.CurrentLayer,"MAXENCOUNTERS")
	End
	
	Get String rOnOff
		if RencOn
			Return "On"
		else
			Return "Off"
		End
	End
	
	Void Color(Int R=255,Int G=255,Int B=255)
		Int ModC = 1
		If !RencOn
			ModC = 2
		End
		Graphics.Color(R div ModC,G div ModC,B div ModC)
	End
	
	Bool AWalkClick=False
	
	
	// Due to a bug in the compiler static locals don't work the way they should
	plua FSin = 0
	plua GX
	
	Void DrawGauge()
		//print("?")
		//Static Int FSin
		GX = GX || Graphics.Width + 250
		Int GY = Graphics.Height - 200
		Int WX
		Var NE = NEnc[Kthura.CurrentLayer]
		//CSayF("Renc gauge (%d,%d) (%s)",GX,GY,Lua.tostring(NE))
		Graphics.Alpha(255)
		If NE
			WX = Graphics.Width - 80
		Else
			WX = Graphics.Width + 250
		End
		If GX>WX
			GX--
		ElseIf GX<WX
			GX++
		End
		// CSayF("%s/%s",NE,MaxEnc) // DEBUG ONLY!
		SetColor(0,0,0) // __Black
		Graphics.Rect(GX-6,GY-100,12,100)
		if RencOn
			If MaxEnc>0 
				Int B; B = math.floor( ((NE||MaxEnc)/MaxEnc)*100)
				For ix=GX-6,GX+5
					FSin = ( FSin + 1 ) % 360
					Color(math.abs(math.floor(Colors[RateLevel].R*xmath.sin((ix*__bmr)+FSin))),math.abs(math.floor(Colors[RateLevel].G*xmath.sin((ix*__bmr)+FSin))),math.abs(math.floor(Colors[RateLevel].B*xmath.sin((ix*__bmr)+FSin))))
					//Graphics.Line(ix,GY-1,ix,GY-B)
					Rect(ix,GY-B,1,B)
				End
			End
		End
		Color()
		Gauge.Draw(GX,GY)
		AWalkClick=True
		if (ML || MR) && Map.AllowEncOff && MX>GX-8 && MX<GX+8 && MY<GY && MY>GY-120
			RencOn = !RencOn
			AWalkClick=False
		End		
	End
	
	plua Max
	plua Tab
	Void StartEncounter()
		// Announce
		CSay("Start Enoounter")
		// Reset
		RateLevel = 1
		NEnc[Kthura.CurrentLayer]--
		// Set up encounter itself
		//Static Var Max
		//Static Var Tab
		max = max || ({{1,2,3,4},{2,3,6,9},{3,6,9,9}})[__skill][party.FrontSize]
		tab = tab || ({NewArray(1,1,1,2,2,3,1,1,2,3,4),NewArray(3,3,3,1,3,3,2,2,3,3,4,4,3,6,3,3,1,1,9),NewArray(3,3,3,6,6,9)})[__skill]
		int num;num = tab[math.random(0,len(tab)-1)]
		//string arena = Kthura.MetaData.Arena
		string arena = RencData.Arena
		//if not suffixed(arena,".png") then arena = arena..".png" end
		num = math.min(num,max)
		Combat.Prepare()
		Combat.Arena = arena
		Combat.Lose = "Respawn"
		pLua aet = Kthura.MetaData.AltEncounterTune
		If aet && aet!=""
			if ! suffixed(lower(aet),".ogg") 
				aet=sprintf("%s.ogg",aet) //aet += ".ogg" 
			end 
			CSayF("= Alt combat tune: %s (%s)",aet,Lua.type(aet))
			Combat.Music = aet
		Else
			Combat.Music = "*RANDOM"
		End
		Lua.assert(Len(Enemies)>0,"I cannot run a Random Encounter without any monsters set")
		For i=1,num 
			Combat.NewEnemy = Enemies[math.random(1,Len(Enemies))]
		end
		Player.StopWalking()
		Combat.Start()
	End
	
	plua Cnt = 0
	Void UpdateGauge()
		//Static Int Cnt
		If (!RencOn) || (!NEnc[Kthura.CurrentLayer]) || NEnc[Kthura.CurrentLayer]<=0 
			Return
		End
		//If FlowField.Map.CurLayer.HasTag("PLAYER") && FlowField.Map.CurLayer.Obj("PLAYER").Walking
		If Kthura.HasObj("PLAYER") && Player.Walking
			Cnt = (Cnt+1)%(300 div __skill)
			If Cnt==0
				RateLevel++
			End
			If (!RRate[RateLevel]) || RRate[RateLevel]<=0
				Return
			End
			If  (RateLevel==5 || Math.Random(1,RRate[RateLevel])==1)
				// NEnc[FlowField.Map.Layer]>0
				StartEncounter()
			End
		End
	End
	
	
	//Void CBLoadMap()
	//	NEnc = {}
	//	Enemies = {}
	//	For i=1,__skill
	//		Var F = Split(FlowField.Map.KthuraMap.Meta["Foes"..i],";")
	//		If __NewGamePlus
	//			For EF in Each ( Split(FlowField.Map.KthuraMap.Meta["Foes_NG+"],";") )
	//				F+=EF
	//			End
	//		End
	//		For Foe in Each(F)
	//			pLua SF = Split(Foe,",")
	//			For j=1,Lua.tonumber(SF[2] || "1") || 1
	//				Enemies += SF[1]
	//			End
	//		End
	//	End
	//	MapHasEnc = #Enemies>0
	//	If !MapHasEnc
	//		Return
	//	End
	//	MaxEnc = Lua.tonumber(FlowField.Map.KthuraMap.Meta.MaxEnc) || 5		
	//	For L in each(FlowField.Map.KthuraMap.Layers)
	//		NEnc[L] = MaxEnc
	//		CSayF("Encountering layer: %s",L)
	//	End
	//	For L in each(Split(FlowField.Map.KthuraMap.Meta.NoEncZones:upper(),","))
	//		NEnc[L] = False
	//		CSayF("Encountering layer: %s - Undone",L)
	//	End
	//	RateLevel = 1
	//	RencOn = True
	//End
	
	Void RencLoader(string mapbundle)
		plua flayer;flayer = sprintf("Kthura/%s/Layers.ini",mapbundle)
		plua frenc; frenc  = sprintf("Kthura/%s/Renc.ini", mapbundle)
		If JCR6.EntryExists(flayer)
			__LayData = GINIE.Load(flayer,"KTHURA_LAYER")
		Else
			__LayData = GINIE.Create("KTHURA_LAYER")
		End
		If JCR6.EntryExists(frenc)
			__RencGINIE = GINIE.Load(frenc,"RANDOM_ENCOUNTERS")
		Else			
			__RencGINIE = GINIE.Create("RANDOM_ENCOUNTERS")
		End
		Enemies = {}
		NEnc = {}
		For Foe In each(RencData.Foes)
			Bool Allow=true
			If Upper(__RencGINIE.Value(Foe,"NEWGAMEPLUSONLY")) == "TRUE"
				Allow = gBool.NewGamePlus
			End
			CSayF("Foe %s! NG+O: %s --> %s",Foe,__RencGINIE.Value(Foe,"NEWGAMEPLUSONLY"),Lua.tostring(Allow))
			If Allow
				For i=1,RencData[foe]
					Enemies[len(Enemies)] = foe
					CSayF("%03d> Enemy added: %s",Len(Enemies),foe) 
				End
			end
		End
		For l In Each(__LayData.Categories)
			NEnc[l] = __LayData.IntValue(l,"MAXENCOUNTERS")
			If Upper(__LayData.Value(l,"BLOCKENCOUNTER"))=="TRUE"
				NEnc[l] = False
				CSayF("Layer %s has no encounters!",l)
			Else
				CSayF("Layer %s has %d encounters",l,NEnc[l])
			End
		End
	End
	
	Init
		FField = Lua.Scyndi.Globals.FlowField
		FField.LMFuncs[len(FField.LMFuncs)] = RencLoader
		Gauge.Hot(Gauge.Width div 2,Gauge.Height)
	
		Colors[1] = {["R"]=  0,["G"]=  0,["B"]=255}
		Colors[2] = {["R"]=  0,["G"]=255,["B"]=  0}
		Colors[3] = {["R"]=255,["G"]=180,["B"]=  0}
		Colors[4] = {["R"]=255,["G"]=  0,["B"]=  0}	
		Colors[5] = Colors[4] // Crash prevention!
		Switch __skill
			Case 1
				RRate[1] = 0
				RRate[2] = 0
				RRate[3] = 1000000000
				RRate[4] = 100000
			Case 2
				RRate[1] = 0
				RRate[2] = 100000000
				RRate[3] = 1000000
				RRate[4] = 10000
			Case 3
				RRate[1] = 100000000
				RRate[2] = 1000000
				RRate[3] = 100000
				RRate[4] = 1000
			Default
				Lua.error(sprintf("INIT.RENC.RATE: Unknown skill: %d",__skill)) 
		End
		RRate[5] = 1 // Security as this should never be checked, but if it is, at least no crashes will come!
	End
// End // No longer needed in Scyndi