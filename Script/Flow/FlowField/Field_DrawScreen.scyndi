// License Information:
// src/Scripts/Script/Flow/FlowField/Field_DrawScreen.scyndi
// Version: 23.11.13
// Copyright (C) 2023 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

#use "Libs/SCI/SYS"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/InterVar"

#use "Libs/Rosetta"
#use "Libs/GameTime"

#use "Script/use/link/map"
#use "Script/Use/Link/Party"
#use "Script/use/link/worldmap"

int ScrollX
int ScrollY

int HX
int HY

var MiniFnt = ObtainFont("Mini")

string LastPlayTex = "***"
string LastLayer = "***"

Var PreDrawScreenMapScriptCyclesFunctions
Var PostDrawScreenMapScriptCyclesFunctions

plua FField

Class MWelcome
	Static Int Cnt = 0
	Static Var First
	Var Next
	ReadOnly Var Img
	ReadOnly Var Tag
	Int Alpha
	Int Time = 200
	
	Constructor(string File)
		Tag = sprintf("WELCOME_%d",Cnt); Cnt++
		Img = LoadImage(File,Tag)
		Img.HotCenter()
		CSayF("Created welcome \"%s\" on tag \"%s\"",File,Tag)
	End
	
	Destructor
		CSay("Destroyed welcome tag: %s",Tag)
	End
End

Global Void NewWelcome(string file)
	plua NW; NW=New MWelcome(file)
	if (!MWelcome.First)
		MWelcome.First = NW
	else
		plua it;it=mwelcome.First
		plua last; last = it
		repeat			
			it=it.Next
			last=it || last
		loopwhile it
		last.Next = NW
	End
End

Void DrawWelcome()
	if MWelcome.First
		SetAlpha(MWelcome.First.Alpha)
		MWelcome.First.Img.Draw(Graphics.Width div 2, Graphics.Height div 2)
		If MWelcome.First.Time>0 && MWelcome.First.Alpha<255
			MWelcome.First.Alpha++
		ElseIf MWelcome.First.Time>0
			MWelcome.First.Time--
		Elseif MWelcome.First.Alpha>0
			MWelcome.First.Alpha--
		Else
			MWelcome.First = MWelcome.First.Next
		End
	End
End

Void LoadWelcome(string mp)
	String f;f="Kthura/"..mp.."/Welcome.png"
	If !Done["Welcome__"..mp]
		If JCR6.EntryExists(f)
			NewWelcome(f)
		Else
			CSay("No welcome.png for this map")
		End
	Else
		CSay("Welcomed here before! Not doing it again!")
	End
End

Void ClearCycleFunctions()
	PreDrawScreenMapScriptCyclesFunctions = {}
	PostDrawScreenMapScriptCyclesFunctions = {}
End

Global Void AddCyclePre(string ms)
	PreDrawScreenMapScriptCyclesFunctions[len(PreDrawScreenMapScriptCyclesFunctions)] = ms
End

Global Void AddCyclePost(string ms)
	PostDrawScreenMapScriptCyclesFunctions[len(PreDrawScreenMapScriptCyclesFunctions)] = ms
End


Init
	HX = Graphics.Width div 2
	HY = Graphics.Height div 2
	CSayF("Center (%d,%d)",HX,HY)
	FField = Lua.Scyndi.Globals.FlowField
	FField.LMFuncs[len(FField.LMFuncs)] = LoadWelcome
	//FField.LMFuncs[len(FField.LMFuncs)] = ClearCycleFunctions
	//FField.ClearCycle = ClearCycleFunctions
End

Bool Scrolling = true

Global Void AutoPlayer()
	if !Kthura.HasObj("Player")
		//CSay("No player! Let's get outta here!")
		Return
	End
	If Scrolling
		ScrollX = Player.X - HX
		ScrollY = Player.Y - HY
	End
	
	string PlayTex = Sprintf("GFX/Player/%s.%s.jpbf",Map.Leader,Player.Wind)
	//CSayF("Player Tex was '%s' and will be '%s'",LastPlayTex,PlayTex)
	if PlayTex!=LastPlayTex || Kthura.CurrentLayer!=LastLayer
		//CSayF("Set player tex to: %s",PlayTex)
		Player.Texture = PlayTex
		LastPlayTex=PlayTex
		LastLayer = Kthura.CurrentLayer
	end
	// The tex change seems odd, but this is to prevent animation conflicts
End

int fSy
int fSx2 = 0

void FSC(string Fld,string value,cnd)
	if cnd
		plua sFld
		sFld = sprintf("%s:",Fld)
		SetColor(255,255,255,255)
		MiniFnt.Text(sFld,FsX2,fSY,1)
		fSx2 = math.max(fSx2,2+MiniFnt.Width(sFld))
		SetColor(255,180,0,255)
		MiniFnt.Text(value,fSx2,fSY)
		//Print(fSx2,fSy,fld,sfld,value)
		fSy = fSy - 20		
	end
end

Void FSD(String Fld,String Value)
	FSC(Fld,Value,true)
End
			
Void FieldStats()
	fSY=Graphics.Height-185
	FSC(Rosetta.GetStr("FieldStats","Cash"),Rosetta.GetStr("FieldStats","1shilder"),gint.cash==1)
	FSC(Rosetta.GetStr("FieldStats","Cash"),sprintf(Rosetta.GetStr("FieldStats","moreshilders"),gint.cash),gint.cash>1)
	FSD(Rosetta.GetStr("FieldStats","LevelCap"),Lua.tostring(gint.LevelCap),gint.LevelCap>0)
	//FSD(Rosetta.GetStr("FieldStats","REnc"),Lua.Scyndi.Class.Field_Renc.rOnOff,Map.AllowEncOff)
	FSC(Rosetta.GetStr("FieldStats","Area"),Kthura.CurrentLayer,Left(Kthura.CurrentLayer,1,1)=="#")
	FSD(Rosetta.GetStr("FieldStats","Location"),Map.Title)
	FSD(Rosetta.GetStr("FieldStats","Time"),GameTime.FShow)
End

// This MUST be global as it's solely called by a different state!
Global Void BoxText_Background()
	AutoPlayer()
	for ms in each(PreDrawScreenMapScriptCyclesFunctions); MapScript[ms](); end;
	Kthura.Draw(ScrollX,ScrollY)
	DrawWelcome()
	for ms in each(PostDrawScreenMapScriptCyclesFunctions); MapScript[ms](); end;
	For f in Each(FField.UDFuncs);f();End
End

Void DrawScreen()
	AutoPlayer()
	for ms in each(PreDrawScreenMapScriptCyclesFunctions); MapScript[ms](); end;
	Kthura.Draw(ScrollX,ScrollY)
	For ms in each(PostDrawScreenMapScriptCyclesFunctions); MapScript[ms](); end;
	Party.Boxes()
	FieldStats()
	For f in Each(FField.UDFuncs);f();End
	//print("CallGauge"); 
	Lua.Scyndi.Globals.FlowField.FIELD_RENC.DrawGauge()
	Lua.Scyndi.Globals.FlowField.FIELD_COMPASS.DrawCompassSpots()
End