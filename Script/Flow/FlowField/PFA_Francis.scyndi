// License Information:
// **********************************************
// 
// src/Scripts/Script/Flow/FlowField/PFA_Francis.scyndi
// (c) Jeroen Broks, 2023, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 23.11.14
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Audio"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Kthura" 
#use "Libs/SCI/InterVar"

#use "Script/Flow/FlowField/Field_PersonalAction"

#use "Script/Use/Link/Map"
#use "Script/Use/Link/Mini"
#use "Script/Use/Link/Alchemy"

const var AudEx = Audio.Obtain("ALCHEMY_EXTRACT")
Const int MaxRadius = 70

plua Crystal
plua FField

Bool PFA_Francis_Allow(); return gbool.Allow_Field_Francis; End

Bool PFA_Francis_Action()
	AudEx.Play()
	For otag,dat in pairs(Crystal)
		//print("Checking: ",otag,dat.Element,Kthura.HasObj(otag))
		If Kthura.HasObj(otag)
			For X=Player.X-MaxRadius,Player.X+MaxRadius,1
				For Y=Player.Y-MaxRadius,Player.Y+MaxRadius,1
					int RZ1;RZ1 = math.abs(X-Player.X)
					int RZ2;RZ2 = math.abs(Y-Player.Y)
					Number HYP;Hyp = math.sqrt((RZ1^2)+(RZ2^2))
					If Hyp<=MaxRadius && Kthura.InObj(otag,x,y)
						Map.PermaKill(otag)
						Mana[dat.Element] = Mana[dat.Element] + dat.Num
						Mini.Write("Francis ",180,0,255)
						Mini.Write(sprintf("extacted %d ", dat.Num),255,180,0)
						Mini.Write(otag,Alchemy.ManaCol[otag].r,Alchemy.ManaCol[otag].g,Alchemy.ManaCol[otag].b)
						If dat.Num==1
							mini.WriteLn(" manament",255,180,0)
						Else
							mini.WriteLn(" manaments",255,180,0)
						End
						Return True
					End
				End
			End
		End
	End
	Return False
End

Bool PFA_Francis_Cycle()
	Return False
End


Void LoadCrystals(String mapb)
	CSay("Crystals")
	string src
	var func	
	src = JCR6.GetString(sprintf("Kthura/%s/Crystal.lua",mapb))
	func = Lua.load(src)
	Crystal = func()
End

Void CheckCrystals()
	plua LCrystal = Crystal[Kthura.CurrentLayer] || {}
	//print("Checking Crystals")
	For otag,dat in pairs(LCrystal)
		//print("Checking: ",otag,dat.Element,Kthura.HasObj(otag))
		If Kthura.HasObj(otag)
			If Upper(dat.Element)=="RANDOM"
				plua m=Alchemy.Manaments
				otag.Element = m[math.random(0,len(m)-1)]
			End
			plua o;o=Kthura.Obj[otag]
			plua c;c=Alchemy.ManaCol[dat.Element]
			if o.r>c.r; o.r--; end
			if o.g>c.g; o.g--; end
			if o.b>c.b; o.b--; end
			if o.r<c.r; o.r++; end
			if o.g<c.g; o.g++; end
			if o.b<c.b; o.b++; end
		End
	End
End


Init
	FField = Lua.Scyndi.Globals.FlowField
	FField.LMFuncs[len(FField.LMFuncs)] = LoadCrystals
	FField.UDFuncs[len(FField.UDFuncs)] = CheckCrystals
	PFA_Reg("Francis",PFA_Francis_Allow,PFA_Francis_Action,PFA_Francis_Cycle,false)
End