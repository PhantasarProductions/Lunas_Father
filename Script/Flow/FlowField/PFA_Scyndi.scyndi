// License Information:
// **********************************************
// 
// src/Scripts/Script/Flow/FlowField/PFA_Scyndi.scyndi
// (c) Jeroen Broks, 2023, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 23.12.26
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/InterVar"

#use "Script/Use/Link/Map"

#use "Script/Flow/FlowField/Field_PersonalAction"

plua FField
Int GoToX
Int GoToY

get int ScrollX; Return Lua.Scyndi.Class.Field_DrawScreen.ScrollX; End
get int ScrollY; Return Lua.Scyndi.Class.Field_DrawScreen.ScrollY; End



Var HookSpots

Void LoadHookSpots(string mapbundle)
	plua f
	plua e
	string code;code = JCR6.GetString(sprintf("Kthura/%s/Poles.lua",MapBundle))
	f,e = Lua.load(code)
	Lua.assert(f,sprintf("Loading poles for %s failed! => %s",MapBundle,e))
	HookSpots = f()
End

//Bool PFA_Scyndi_Allow(); return gbool.Allow_Field_Scyndi; End

Bool PFA_Scyndi_Action(String Wind)
	plua Accepted = nil
	For tag,Spot in pairs(HookSpots[Kthura.CurrentLayer])
		If Accepted; Break; End
		Switch Upper(Wind)
			Case "NORTH"
				If math.abs(Spot.x-Player.x)<=16 && spot.y<Player.y; Accepted=Spot; End
			Case "SOUTH"
				If math.abs(Spot.x-Player.x)<=16 && spot.y>Player.y; Accepted=Spot; End
			Case "WEST"
				If math.abs(Spot.y-Player.y)<=16 && spot.x<Player.x; Accepted=Spot; End
			Case "EAST"
				If math.abs(Spot.y-Player.y)<=16 && spot.x>Player.x; Accepted=Spot; End
			Default
				Return False
		End
	End
	if !Accepted; CSay("Whip hook rejected! No spots in range at all"); Return False;End
	CSayF("A spot for Scyndi has been accepted at (%4d,%4d) for now (are there any blockades ahead?)",Accepted.x,Accepted.y)
	Bool GoOn = true
	For ix=math.min(Player.X,Accepted.x),math.max(Accepted.x,Player.X)
		For iy=math.min(Player.Y,Accepted.y),math.max(Accepted.y,Player.Y)			
			If Kthura.Block(ix div 32,iy div 32)
				GoOn = GoOn && PFA_Pass(ix,iy)
				If !GoOn
					CSayF("= Whip blocked at (%4d,%4d). (Block=%5s; Pass=%5s)",ix,iy,Kthura.Block(ix div 32,iy div 32),PFA_Pass(ix,iy))
					Break
				End
			End
		End
	End	
	If GoOn
		GoToX,GoToY = Accepted.x,Accepted.y
		Player.MoveTo(GoToX,GoToY)
	End
	Return GoOn
End

Bool PFA_Scyndi_Cycle()
	SetColor(255,180,0)
	Line(Player.X-Scrollx,Player.Y-16-Scrolly,GoToX-ScrollX,GoToY-ScrollY)
	Return Player.Moving
End

Init
	FField = Lua.Scyndi.Globals.FlowField
	FField.LMFuncs[len(FField.LMFuncs)] = LoadHookSpots
	PFA_Reg("Scyndi",nil,PFA_Scyndi_Action,PFA_Scyndi_Cycle,true)
End