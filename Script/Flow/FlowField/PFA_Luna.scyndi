// License Information:
// **********************************************
// 
// src/Scripts/Script/Flow/FlowField/PFA_Luna.scyndi
// (c) Jeroen Broks, 2023, 2024, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 24.01.18
// End License Information
Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/JCR6"
#use "Libs/SCI/Audio"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/InterVar" 

#use "Script/Flow/FlowField/Field_PersonalAction"

#use "Script/Use/Link/Map"

//Bool PFA_Luna_Allow(); return gbool.Allow_Field_Luna; End

ReadOnly Var SmashAudio = Audio.Obtain("PFA_LUNA")
Plua Smash
Plua SmashDone
Plua FField
	
	

Bool PFA_Luna_Allow(); return gbool.Allow_Field_Luna; End

Bool PFA_Luna_Action()
	For _crack_ in Each(Smash[Kthura.CurrentLayer]._cracks_)
		If Kthura.HasObj(_crack_)
			PLUA CrTex
			PLUA O
			O = Kthura.Obj[_crack_]
			CrTex = "CRTEX_"..right(_crack_,len(_crack_)-6)
			CSayF("Crack checking: %s (%d,%d) %dx%d    Player(%d,%d)",_crack_,O.X,O.Y,O.W,O.H,Player.X,Player.Y)
			If Player.X>=O.X && Player.X<=O.X+O.W && Player.Y>O.Y+O.H && Player.Y<O.Y+O.H+40+((O.H+O.Y)%32)
				SmashAudio.Play()
				Map.PermaKill(CrTex)
				Map.PermaKill(_crack_)
				Kthura.ShowByLabel(_crack_)
				gInt.Luna_Broken_Walls++
				if Smash[Kthura.CurrentLayer][_crack_]
					MapScript[Smash[Kthura.CurrentLayer][_crack_]](_crack_)
				End
				Return True
			End
		Else
			CSayF("Check checking: %s -> Not existant so skipping!",_crack_)
		End
	End
	Return False
End

Bool PFA_Luna_Cycle()
	Return False
End



Void LoadCrack(string mapb)
	plua src
	plua func
	plua err
	SmashDone = nil
	src = JCR6.GetString(sprintf("Kthura/%s/Crack.lua",mapb))
	func,err = Lua.load(src)
	Lua.assert(func,err)
	Smash = func()
End

Void CheckSmashWall()
	If SmashDone==Kthura.CurrentLayer; Return; End
	//Lua.assert(Secrets[Kthura.CurrentLayer],"No 'Secret' data for: "..Kthura.CurrentLayer)
	if !Smash[Kthura.CurrentLayer]; Return; End
	For _crack_ in Each(Smash[Kthura.CurrentLayer]._cracks_)
		if (Kthura.HasObj(_crack_))
			Kthura.HideByLabel(_crack_)
		End
	End
	SmashDone=Kthura.CurrentLayer
End

Init
	PFA_Reg("Luna",PFA_Luna_Allow,PFA_Luna_Action,PFA_Luna_Cycle,false)
	FField = Lua.Scyndi.Globals.FlowField
	FField.LMFuncs[len(FField.LMFuncs)] = LoadCrack	
End