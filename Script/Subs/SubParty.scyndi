// License Information:
// src/Scripts/Script/Subs/SubParty.scyndi
// Version: 24.01.04
// Copyright (C) 2023, 2024 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Script

#use "Libs/SCI/Sys"
#use "Libs/SCI/Audio"
#use "Libs/SCI/SString"
#use "Libs/SCI/Statistician"
#use "Libs/SCI/GINIE"
#use "Libs/SCI/Graphics"
#use "Libs/SCI/InterVar"

#use "Libs/MultiPointer"

#use "Script/Use/General/Dice"
#use "Script/use/Link/Party"
#use "Script/use/Link/Mini"

const int expmax = 100000000;

Var _Party
Var CharDat
Var BaseStats = NewArray("Strength","Defense","Intelligence","Resistance","Agility","Accuracy","Evasion")
Var CFG
var CHT = {}
Var BoxBack = ObtainImage("BOX_BACK")
var StatFnt = ObtainFont("METAL")
var MiniFnt = ObtainFont("MINI")
var ImgHP   = ObtainImage("BOX_HP")
var ImgFP   = ObtainImage("BOX_FP")
var ImgVIT  = ObtainImage("BOX_VIT")
var ImgLV   = ObtainImage("BOX_LV")
var AudLvUp = Audio.Obtain("LEVELUP")
var ImgLvUp = ObtainImage("LEVELUP") 

const Int PBX = 0
const Int PBY = Graphics.Height - 170
Const int PBW = Graphics.Width
Const Int PBH = 120


Init
	CSay("Creating Statician Data")
	_Party = Statistician.CreateNew("LUNA_PARTY")
	CSay("Loading Char Stats Base Data")
	CharDat = GINIE.LoadNew("Data/General/CharStats.ini","LUN_CHARDAT")
	CSay("Importing Global Config to Party Sub")
	CFG = GINIE.Obtain("GLOBALCONFIG")
	CSay("All initiations for the Party Sub have been accounted for")
End

int NeedExp(int level)
	// Original C prototype code
	// (Part of it. The full code can be found here: 
	// https://gist.github.com/Tricky1975/dd2a7026e6f08883d92758d5ec56c175)
    // int lv=1;                                                                              
    // unsigned char notallmax=1;                                                             
    // printf("%9s%9s%9s%9s\n","Level",DName[0],DName[1],DName[2]);                           
    // do{                                                                                    
    //        printf("%9d",lv++);                                                            
    //        for(int i=0;i<3;++i) {                                                         
    //                if (exppnt[i]<expmax) {                                                
    //                        printf("%9d",exppnt[i]);                                       
    //                        exppnt[i] += ((int)floor(exppnt[i]*mul[i]));                   
    //                } else {                                                               
    //                        printf("\x1b[31m%9s\x1b[0m","MAX!");                           
    //                }                                                                      
    //        }                                                                              
    //        printf("\n");                                                                  
    //        notallmax=exppnt[0]<expmax || exppnt[1]<expmax || exppnt[2]<expmax;            
    //} while(notallmax);    
//}
	var mul = newarray(0.125,0.25,0.50)
	int Ski
	number ret 
	int lv = 1
	ret = 10
	ski = gint.skill - 1
	while lv<level
		if ret > expmax
			return expmax
		end
		ret = ret + math.floor(ret*mul[ski])
		lv++
	end
	return math.floor(ret)
end
	
	

Void SetLevel(string CharTag,int lvl)
	// Please note, this code was adapted from prototype code originally 
	// coded in C and adapted to Scyndi in order to be usable in this game 
	// script. A few small differences between C and this in outcome are
	// possible. (I hope not)
	
	CSayF("%s is now level %d",CharTag,lvl)
	// General Stat
	Var Ch
	//Ch = CHT[CharTag]
	Ch = _Party.Char[CharTag]
	Ch.Stat.Level=lvl
	For s in Each(BaseStats)		
		number st
		st = Ch.BStat[s]
		CSayF("=> %s was %d",s,st)
		Ch.XStat[s].Buff.LevelUp = round( (st/30) * (lvl-1))
		CSayF("=> %s has bonus of %d",CharTag,Ch.XStat[s].Buff.LevelUp)
	End
	
	// Hitpoints
	int lv1
	int lv100
	int verschil
	int _HP
	number gain
	lv1    = Ch.Stat.HP1
	lv100  = Ch.Stat.HP100
	verschil = lv100 - lv1
	gain = (verschil / 99.0)
	
	// The prototype output in C. I kept it as a reference.
	// printf("%s would gain %f HP per level!\n", ch, gain);	
	// for (int lv = 1; lv <= 125; ++lv) {
	// int _HP = jround(lv1 + (gain * (lv - 1)));
	//	printf("- On level %d, %s would have %d HP\n",lv,ch,_HP);
	// }
	_HP = round(lv1 + (gain * (lvl - 1)));
	Ch.Stat.HP = _HP
	Ch.Points.HP.Have    = Ch.Points.HP.Maximum
	Ch.Points.VIT.Have   = Ch.Points.VIT.Maximum
	Ch.Points.SP.Maximum = Lvl	
	CSayF("%d: %d + %d = %d",Lvl,Ch.Stat.Exp ,NeedExp(lvl), Ch.Stat.Exp + NeedExp(lvl))
	Ch.Stat.Exp = Ch.Stat.Exp + NeedExp(lvl)
	
End

Global Void CreateChar(string Tag,int slvl1, int slvl2, int slvl3)
	String Cat
	Int StartLevel
	int VIT
	Cat = sprintf("Rec:%s",Tag)
	Switch gint.Skill
		case 1
			StartLevel = slvl1
			VIT=250
		case 2
			StartLevel = slvl2
			VIT=100
		case 3
			StartLevel = slvl3
			VIT=0
		default
			Lua.error("Skill error on character creation!")
	End
	CSayF("Creating character %s, starting at level %d",Tag,StartLevel)
	CSayF("Sending hash!")
	CFG.NewValue("Chars",Tag,MD5(Tag))
	var Ch 
	CSayF("NewChar Call")
	_Party.NewChar(Tag)
	CSayF("Retrieving character data")
	Ch = _Party.Char[Tag]
	Cht[Tag] = Ch
	CSayF("Setting Character's name")
	Ch.Name = CharDat.Value(Cat,"Name")
	CSay("Resetting experience points")
	Ch.Stat.Experience=0
	CSayF("Setting base stats")
	For s in Each(BaseStats)
		CSayF("= Base Stat: %s = %d",s,CharDat.IntValue(Cat,s))
		Ch.Stat[s] = CharDat.IntValue(Cat,s)
	End
	CSay("Base of HP")
	Ch.Stat.HP1   = CharDat.IntValue(Cat,"HP")
	Ch.Stat.HP100 = CharDat.IntValue(Cat,"HP_lv100")
	Ch.Stat.HP    = 0
	CSay("Set points configuration right!")
	Ch.Points.HP .MaxCopy = "HP"
	Ch.Points.FP .Maximum = 100
	Ch.Points.VIT.Maximum = VIT
	CSay("Data!")
	Ch.Data.Race     = CharDat.Value(Cat,"Race")
	Ch.Data["Class"] = CharDat.Value(Cat,"Class")
	Ch.Data.Gender   = CharDat.Value(Cat,"Gender")
	Ch.Data.Weapon   = CharDat.Value(Cat,"Weapon")
	Ch.Data.Skill1   = CharDat.Value(Cat,"Skill1")
	Ch.Data.Skill2   = CharDat.Value(Cat,"Skill2")
	Ch.Data.Name     = CharDat.Value(Cat,"Name")
	for d in Each(Dice.Types)
		if d==CharDat.IntValue(Cat,"Die")
			ch.Stat.BaseDie = CharDat.IntValue(Cat,"Die")
			ch.Stat[sprintf("d%d",d)] = 1
		else 
			ch.Stat[sprintf("d%d",d)] = 0
		end
	end
	Ch.Stat.AtkPlus = 0	
	Ch.Stat.Upgrades = 0
	SetLevel(Tag,StartLevel)
End

plua Portret
plua MiniPortret
Init
	Portret = {}
	MiniPortret = {}
	for i,c in pairs {"Myrah","Francis","Luna","Scyndi","Aziella","Rachel"}
		CSayF("SubParty: Obtained portrait for %s",c)
		Portret[c] = ObtainImage(sprintf("PORTRET_%s",Upper(c)))
		MiniPortret[c] = ObtainImage(sprintf("MINIPORTRAIT_%s",Upper(c)))
	end
End

int _Hue = os.time()
int _Deg = os.time()
int _lvcd = 0
int _lvalpha = 0

Void ChkLevelUp(int i,Ch)
	if Ch.Stat.Level<=gint.LevelCap && Ch.Stat.Exp<=0
		Mini.Write(Ch.Data.Name,255,180,0)
		Mini.WriteLn(" has gained a level!",180,0,255)
		SetLevel(_Party.Party[i],Ch.Stat.Level+1)
		AudLvUp.Play()
		_LvAlpha=255
		_LvCD=255
		For i=1,2 
			Lua.Scyndi.Globals.CharSkillExpUp(_Party.Party[i],i,Ch.Stat.Level)
		End
	End
End

Global Void PartyBoxes(flashchar,incombat)
	int BW
	SetColor(255,255,255,255)
	BoxBack.Tile(PBX,PBY,PBW,PBH+50)
	SetColor(0,0,0,160)
	Rect(PBX,Graphics.Height-50,PBW,100)
	SetColor(255,255,255,255)
	BW = (PBW-20) div Party.FrontSize
	For i = 0,Party.FrontSize-1
		plua Ch
		plua PImg
		plua barw
		barw = BW-150
		PImg = Portret[_Party.Party[i]]
		Ch = _Party.Char[_Party.Party[i]]
		if !incombat
			MultiPointer.RCV()
			//print( i,sprintf("Mouse(%d,%d)",MX,MY),MY>PBY , MX>(BW*i) , MX<(BW*(i+1)) , MY<PBY+PBH) 
			if MY>PBY && MX>(BW*i) && MX<(BW*(i+1)) && MY<PBY+PBH 
				_Hue = (_Hue+1) % 360
				SetColorHSV(_Hue,1,1)
				SetAlpha(100)
				Rect((BW*i),PBY,BW,PBH)
				if ML
					Sys.Call(Sys.CurrentFlow,"Left_Clicked_Party",i,_Party.Party[i])
				elseif MR
					Sys.Call(Sys.CurrentFlow,"Right_Clicked_Party",i,_Party.Party[i])
				end
			end
		end
		Lua.assert(PIMG,sprintf("Nil received for portrait: (%d/%d) '%s'",i+1,Party.FrontSize,_Party.Party[i]))
		SetColor(255,255,255,255)
		if _Party.Party[i]==flashchar
			_Deg = (_Deg+1)%360
			plua _Rad;_Rad = math.rad(_Deg)
			plua _Sin;_Sin = math.sin(_Rad)
			SetAlpha(math.floor(math.abs(_sin*255)))
		End
		PImg.Draw(BW*i,(PBY+PBH)-PImg.Height)
		// HP
		SetColor(100,100,100,255)
		Rect((BW*i)+120,PBY+10,barw,10)
		plua Breuk 
		plua G
		breuk=Ch.Points.HP.Have/Ch.Points.HP.Maximum
		G=math.floor(breuk*255)
		SetColor(255-G,G,0)
		Rect((BW*i)+120,PBY+10,math.floor(barw*breuk),10)
		ImgHP.Draw(BW*i+120,PBY)
		StatFnt.Text(lua.tostring(Ch.Points.HP.Have),(BW*i)+(BW-10),PBY,1)
		if gbool.Regenmode;Ch.Points.HP.Have++;End
		// FP
		if !incombat
			switch gint.skill
			case 1
				Ch.Points.FP.Have=math.max(Ch.Points.FP.Have,Ch.Stat.Level)
			case 2
				Ch.Points.FP.Have=Ch.Stat.Level
			case 3
				Ch.Points.FP.Have=math.min(Ch.Points.FP.Have,Ch.Stat.Level)
			Default
				Lua.error("FP Skill Error!")
			end
			If Ch.Points.HP.Have<Ch.Points.HP.Maximum && Ch.Points.VIT.Have>0
				Ch.Points.VIT.Have--
				Ch.Points.HP.Have = Ch.Points.HP.Have + math.max(1,Ch.Points.HP.Maximum Div 100)
			End
		end
		breuk=Ch.Points.FP.Have div 25		
		for j=1,4
			if j<=breuk
				setcolor(180,0,255)
			else
				setcolor(18,0,25)
			end
			Rect(math.floor(((BW*i)+120)+((j-1)*((barw/4)))),PBY+47,math.floor((barw/4)-2),3)
		end
		breuk=Ch.Points.FP.Have/Ch.Points.FP.Maximum
		SetColor(100,100,100)
		Rect((BW*i)+120,PBY+40,barw,5)
		SetColor(0,180,255)
		Rect((BW*i)+120,PBY+40,math.floor(barw*breuk),5)
		ImgFP.Draw(BW*i+120,PBY+30)
		StatFnt.Text(lua.tostring(Ch.Points.FP.Have),(BW*i)+(BW-10),PBY+30,1)
		// VIT
		if Ch.Points.VIT.Maximum>0
			SetColor(100,100,100)
			Rect((BW*i)+120,PBY+70,barw,10)
			breuk=Ch.Points.VIT.Have/Ch.Points.VIT.Maximum
			SetColor(255,180,0)
			Rect((BW*i)+120,PBY+70,math.floor(barw*breuk),10)
			ImgVIT.Draw(BW*i+120,PBY+60)
			StatFnt.Text(lua.tostring(Ch.Points.VIT.Have),(BW*i)+(BW-10),PBY+60,1)
		End
		// Level
		if Ch.Stat.Level<=gint.LevelCap
			SetColor(255,255,255)
			ImgLv.Draw(BW*i,(PBY+PBH)-ImgLv.Height)
			if Ch.Stat.Level==gint.LevelCap
				SetColor(180,255,0)
			Else
				SetColor(255,180,0)
			End
			StatFnt.Text(lua.tostring(Ch.Stat.Level),(BW*i)+ImgLv.Width+5,(PBY+PBH),0,1)
		End
		// Level Up
		ChkLevelUp(i,ch)	
		if  _LvAlpha>0 || _LvCD>0
			_LvCD--
			if _LvCD<=0
				_LvAlpha--
			end
		end
		SetAlpha(_LvAlpha)
		ImgLvUp.Draw(BW*i,(PBY+PBH)-ImgLvUp.Height)
		SetAlpha(255)
	End
	For i=3,Party.FullSize-1
		plua TC
		plua CH
		int Y;Y = PBY+((i-3)*30)
		TC = _Party.Party[i]
		Ch = _Party.Char[TC]
		ChkLevelUp(i,ch)
		If (!incombat) 
			Ch.Points.FP.Maximum=100
			switch gint.skill
			case 1
				Ch.Points.FP.Have=math.max(Ch.Points.FP.Have,Ch.Stat.Level)
			case 2
				Ch.Points.FP.Have=Ch.Stat.Level
			case 3
				Ch.Points.FP.Have=math.min(Ch.Points.FP.Have,Ch.Stat.Level)
			Default
				Lua.error("FP Skill Error!")
			end
			If MX>Graphics.Width-20 && MY>Y && MY<Y+20
				SetColorHSV(_Hue,1,1)
				SetAlpha(100)
				Rect(Graphics.Width-20,Y,20,20)
				If ML
					Sys.Call(Sys.CurrentFlow,"Left_Clicked_Party",i,_Party.Party[i])
				ElIf MR
					Sys.Call(Sys.CurrentFlow,"Right_Clicked_Party",i,_Party.Party[i])
				End
			End
		End
		// Yes in combat the VIT bar will fill up the back row. 
		// That was deliberate! An advantage of knowing when to switch characters.
		If Ch.Points.HP.Have<Ch.Points.HP.Maximum && Ch.Points.VIT.Have>0
			Ch.Points.VIT.Have--
			Ch.Points.HP.Have = Ch.Points.HP.Have + math.max(1,Ch.Points.HP.Maximum Div 100)
		End

		SetColor(255,255,255,255)
		MiniPortret[TC].Draw(Graphics.Width-10,Y+10)
		
	End
	Lua.Scyndi.Globals.MiniShow()
End

Global Void Recover()
	For i=0,Party.FullSize-1
		plua Ch
		Ch = _Party.Char[_Party.Party[i]]
		Ch.Points.HP.Have = Ch.Points.HP.Maximum
		Ch.Points.VIT.Have = Ch.Points.VIT.Maximum
	End
End

Global Void CharSkillExpUp(string chTag,int skill,int experience)
	Switch gint.skill
		Case 1
			If Party.SkillLvl(chTag,Skill)>=500; return; end
		Case 2
			If Party.SkillLvl(chTag,Skill)>=250; return; end
		Case 3
			If Party.SkillLvl(chTag,Skill)>=100; return; end
		Default
			Return
	End
	plua sk; sk = Party.SkillExp(chTag,skill)
	plua g = Lua.Scyndi.Globals
	sk.have = sk.Have + experience
	if sk.Have>=sk.Maximum
		G.WriteMini(_Party.Char[chTag].Data.Name,180,0,255)
		G.WriteMini(" has gained a skill level: ",255,180,0)
		G.WriteMini(_Party.Char[chTag].Data["Skill"..skill],255,255,255)
		G.PushMini()
		sk.have = 0
		_Party.Char[chTag].Stat[sprintf("SKILL_Lvl_%d",Skill)] = Party.SkillLvl(chTag,Skill)+1
	End		
End

#region "Mini Messages"

int MT_Y = Graphics.Height-50

Class MiniText
	Byte R = 255
	Byte G = 255
	Byte B = 255
	String Msg
	Int X
	Var Next
End

Var MiniLine = {}
Var MiniLineFirst = nil
Var MiniLineCurrent = nil

Global Void MiniShow()
	For i,mt in ipairs(MiniLine)
		plua mtt = mt
		While mtt
			SetColor(mtt.R,mtt.G,mtt.B,255)
			MiniFnt.Text(Mtt.Msg,Mtt.x,MT_Y+(i*15))
			mtt = mtt.Next
		End
	End
End


Global Void WriteMini(string msg,byte r,byte g,byte b)
	if !MiniLineFirst
		MiniLineFirst = New MiniText()
		MiniLineCurrent = MiniLineFirst
		MiniLineCurrent.X = 1
	else
		Int MX
		MX = MiniLineCurrent.X + MiniFnt.Width(MiniLineCurrent.Msg) //+ MiniFnt.Width(" ")
		MiniLineCurrent.Next = New MiniText()
		MiniLineCurrent = MiniLineCurrent.Next
		MiniLineCurrent.X = MX
	End
	MiniLineCurrent.R = R
	MiniLineCurrent.G = G
	MiniLineCurrent.B = B
	MiniLineCurrent.Msg = msg
End

Global Void PushMini()
	If Len(MiniLine)>=3
		MiniLine[0] = MiniLine[1]
		MiniLine[1] = MiniLine[2]
		// MiniLine[2] = nil
	End
	MiniLine[2] = nil 
	MiniLine[3] = nil // Safety precaution, should not be needed.
	MiniLine[len(MiniLine)]=MiniLineFirst
	CSayF("Pushing line starting with: %s",MiniLineFirst.Msg)
	MiniLineFirst = nil
	MiniLineCurrent = nil
End

Init
	WriteMini("Welcome to ",180,0,255)
	WriteMini("\"Luna's Father\"",255,180,0)
	PushMini()
End
#endregion